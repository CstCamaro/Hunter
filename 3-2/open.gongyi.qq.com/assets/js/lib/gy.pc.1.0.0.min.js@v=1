
/**
 * @markdown
 *
 * @apiExample  公益公共库全局对象window.GY
 *
 *
 * ☆☆☆☆☆公共库维护注意事项：
 *
 * 1.在其他分支修改的代码，验证没有问题后，要合入到master，master为最终版
 *
 * 2.修改了公共库，在群里知会他人是否有影响
 *
 * 3.在编写函数时，函数命名尽量遵守“看名识意”原则，和变量命名规则一样。尽量准确表达。比如`function unixToDate(unix, format){}`给人印象就是unix下时间转Date时间，unix下时间单位是秒。要在代码中转为毫秒再转变为Date时间
 *
 * @apiGroup GY
 * @apiVersion 1.0.0
 */
var GY = (function(global, $){
    global.Protocol = ('https:' == document.location.protocol) ? 'https://': 'http://';
    /**
     * 判断对象是否Object类型(不严格判断是否plain Object，只要是非空的非基本类型)
     *@apiName is_obj
     * @param {any} obj
     * @returns
     */
    function _is_object(obj) {
        if (_is_simple_type(obj) || _is_array(obj)) {
            return false;
        } else if (typeof obj == 'object') {
            return true;
        }
        return false;
    }

    function _is_simple_type(obj) {
        return _is_string(obj) ||
            _is_numeric(obj) ||
            _is_undefined(obj) ||
            (typeof obj == 'boolean') ||
            ((typeof obj == 'number') && isNaN(obj)) ||
            (obj == null);
    }

    /**
     * 限制一个函数在指定秒数内最多调用一次
     * @apiName rateControll
     * @param {any} onReadyFn
     * @param {any} onError
     **/       
    function _rate_controll(fn,rateSecs) {
        fn._h = 0;
        return function () {
            var args = arguments;
            if (fn._h) {
                clearTimeout(fn._h);
                fn._h = 0;
            }
            fn._h = setTimeout(function () {
                fn.apply(null, args);
                fn._h = 0;
            }, rateSecs * 1000);
        }
    }

    /**
     * 判断对象是否为字符串实例
     *
     * @param {any} obj
     * @return 返回判断结果的布尔值
     * @private
     */
    function _is_string(obj) {
        return (typeof obj == 'string');
    }

    /**
     * 判断是否是函数定义
     *@apiName is_fun
     * @param {any} obj
     * @return {Boolean} 返回对入参判断的结果
     **/
    function _is_function(obj) {
        return ($ && (typeof $.isFunction == 'function')) ? $.isFunction(obj) : ((typeof obj == 'function') || obj instanceof Function);
    }

    /**
     * 判断对象是否为数组
     * @apiName is_arr
     * @param {any} obj 要判断的对象
     * @return {Boolean} 返回对入参的判断结果
     **/
    function _is_array(obj) {
        return ($ && $.isArray) ? $.isArray(obj) : (typeof obj == 'array' || obj instanceof Array);
    }

    /**
     * 判断对象是否为合法的数字
     *
     * @param {any} obj
     * @return {Boolean} 返回对象类型判断的逻辑结果布尔值
     * @private
     **/
    function _is_numeric(obj) {
        //需要考虑类似233x33也开会被isNaN判定为false(也就是认为它是数字)的情况.
        return ($ && $.isNumeric) ? $.isNumeric(obj) : (!isNaN(obj) && ((obj - 0) == obj));
    }
    /**
     * 
     * @param {*} obj 
     * @private
     */
    function _is_undefined(obj) {
        return (obj == void (0));
    }

    /**
     * 对象是否为空。
     * @private
     * @access private
     * @return {Boolean} 除了逻辑否，null,false,{},空数组,NaN及可以转换为false的对象都返回false。注意:"0"字符串和"null"等字符串不是false.
     **/
    function _is_empty(obj) {
        if (!obj) {
            return true;
        }
        if (_is_array(obj) && !obj.length) {
            return true;
        }

        if (_is_object(obj)) {
            return !!!_get_obj_keys(obj).length;
        }

        return !!!obj;
    }
    
    /**
     * 加载GY命名空间下的其他对象
     * */
    if(!global.require){
        global.require = function(strObj){
            return GY[strObj] || null;
        }
    }

    /**
    * @apiName IteralCb
    * IteralCb是forEach的回调函数iteralCb
    * @param {object}          itm
    * @param {(string|int)}    idx
    * @param {object}          object
    */
   
    /**
     * 枚举处理对象内容
     * @apiName forEach
     * @param {*}         obj
     * @param {IteralCb} iteralCb  This callback type is called `IteralCb` and used for _for_each.
     */
    function _for_each(obj, iteralCb) {
        if (_is_empty(obj) || !_is_function(iteralCb)) {
            throw new Error('Empty object!');
        }

        if (_is_array(obj)) {
            var hasBreak = false;
            obj.forEach && obj.forEach(function(itm, index) {
                if (!hasBreak && iteralCb(itm, index, obj) == {}) {
                    hasBreak = true;
                }
            });
        } else if (_is_object(obj)) {
            for (var k in obj) {
                if (iteralCb(obj[k], k, obj) == {}) {
                    break;
                }
            }
        }
    }
    

    /**
     * @apiName extend
     * 扩展对象，都在GY对象下面，目前只支持扩展2层
     * 扩展对象内如果有__init的方法，会自动执行
     * 
     * @author hunterguo
     * */
    var _extend = function(ns, extObj){
        if(!_is_string(ns)) return;
        if(ns.indexOf(".") != -1){
            var _arrNs = ns.split('.');
            var _len = _arrNs.length;
            var _key0,_key1;
            for(var k in _arrNs){
                if(k == 0){
                    _key0 = _arrNs[k];
                    if(!GY[_key0]){GY[_key0] = {}}
                }else{
                    _key1 = _arrNs[k];
                    if(!GY[_key0][_key1]){
                        GY[_key0][_key1] = extObj;
                    }else{
                        $.extend(GY[_key0][_key1], extObj);
                    }
                }
            }
        }else{
            if(!GY[ns]){
                GY[ns] = extObj;
            }else{
                $.extend(GY[ns],extObj);
            }
        }
        //自动执行__init函数
        if(!!extObj.__init && !!_is_function(extObj.__init)){
            extObj.__init();
        }
    }


    return {
        extend: _extend
        , user: {}
        ,rateControll:_rate_controll
        ,is_fun:_is_function
        ,is_arr:_is_array
        , is_obj: _is_object
      
        ,forEach:_for_each
    };
})(window, window.Zepto || window.jQuery);
; (function (nameSpace, global) {

    function _dbg() {
        var args = Array.prototype.slice.call(arguments, 0, arguments.length);
        args.unshift('[DEBUG]');
        console.info.apply(console, args);
    }
    /**
     * 复制字符串到指定长度
     * @param {string} str      源字符串
     * @param {integer} len     目标长度
     * @param {1|0} direct      填充的方向 1-右侧（尾部）填充;0-左侧(前部)填充
     */
    function _str_multiply(str, len, direct) {
        direct = direct || 0;
        var ret = str;

        direct = direct == void (0) ? 1 : (!!direct ? 1 : 0);

        while (ret.length < len) {
            ret += ret;
        }
        if (ret.length > len) {
            if (direct == 0) {
                //向左边补齐，裁掉左边多余的字符
                ret = ret.substr(ret.length - len);
            } else {
                ret = ret.substr(0, len);
            }
        }
        return ret;
    }

    /**
     * 填充字符串到指定的长度
     * @param {string}  str     源字符串
     * @param {integer} len     填充长度
     * @param {string}  strPad  填充的字符串 
     * @param {1|0}     direct  填充方向;0-左侧，1-右侧
     */
    function _str_pad(strSource, len, strPad, direct) {
        strPad = (strPad == void (0) || ('' == strPad)) ? ' ' : String(strPad);
        direct = direct == void (0) ? 1 : (!!direct ? 1 : 0);

        var ret = strSource,
            strL = strSource.length;
        if (strL < len) {
            if (!direct && (typeof strSource['padStart'] == 'function')) {
                ret = strSource.padStart(len, strPad);
            } else if (direct && strSource['padEnd']) {
                ret = strSource.padEnd(len, strPad);
            } else {
                var strP = _str_multiply(strPad, strL - len, direct);
                ret = direct ? (strSource + strP) : (strP + strSource);
            }

            strL = ret.length;
        }

        if (strL > len) {
            if (direct) {
                ret = strSource.substr(0, len);
            } else {
                ret = strSource.substr(strL - len);
            }
        }

        return ret;
    }

    // 分组长度
    var STR_STEP = 2,
        SEC_MASK = parseInt(_str_multiply('F', STR_STEP), 16);


    /**
     * 16进制字符串位操作
     * @param {string} str1 操作字符串1
     * @param {string} str2 
     * @param {1|2} oprtype 操作类型 1=and操作,2=or操作
     */
    function _hex_opr(str1, str2, oprtype) {
        str1 = str1 || '';
        str2 = str2 || '';
        oprtype = oprtype == void (0) ? 1 : 2;
        var l = Math.min(str1.length, str2.length),
            secs = Math.ceil(l / STR_STEP),
            iv = 0,
            i = 0;

        var ret = "";
        while (i < secs) {
            if(1==oprtype){
                iv = parseInt(str1.substr(i * 2, 2), 16) & parseInt(str2.substr(i * 2, 2), 16);
            }else{
                iv = parseInt(str1.substr(i * 2, 2), 16) | parseInt(str2.substr(i * 2, 2), 16);
            }
            ret += _str_pad(iv.toString(16), STR_STEP, '0', 0);
        }

        return ret;
    }

    function _hex_and(str1, str2) {
        return _hex_opr(str1, str2, 1);
    }

    function _hex_or(str1, str2) {
        return _hex_opr(str1, str2, 2);
    }

    /**
     * 字符串按十六进制数字取反结果
     * 
     * @param {string} str 
     * @return {string}
     */
    function _hex_not(str) {
        str = str || '';
        if (str == '') {
            return str;
        }

        var ret = "";
        var l = str.length
            , secs = Math.ceil(l / STR_STEP)
            , iv = 0
            , i = 0;
        while (i < secs) {
            try {
                iv = parseInt(str.substr(i * STR_STEP, STR_STEP), 16);
                // _dbg('----Log',iv);
                iv = ~(iv >>> 0);
                // _dbg('----Log2',iv);
                // iv =~iv;
                iv &= SEC_MASK;
                // _dbg('----Log3',iv);

                ret += _str_pad(iv.toString(16), STR_STEP, '0', 0);
            } catch (e) {
                console.error(e);
                break;
            }
            i++;
        }
        return ret.toUpperCase();
    }

    !String.prototype.hexNot && (String.prototype.hexNot = function () {
        return _hex_not(this);
    });

    !String.prototype.hexOr && (String.prototype.hexOr = function (str) {
        return _hex_or(this, str);
    });

    !String.prototype.pad && (String.prototype.pad = function (len, strPad, dir) {
        return _str_pad(this, len, strPad, dir);
    });

    GY.extend(nameSpace, {
        strPad: _str_pad,
        hexOr: _hex_or,
        hexAnd: _hex_and,
        strMultiply: _str_multiply
    });

})('Util.str', window);

; (function (nameSpace) {
    /**
     * @apiExample  使用示例
     * GY.Util.string.toObj('a=%E4%BD%A0%E5%A5%BD',1);   //{a: "你好"}
     * @apiExample  功能
     * 将字符串转换为json对象
     * 
         * @apiGroup GY.Util.string
         * @apiName toObj
         * @api {~} GY.Util.string.toObj string转为json
         * 
         * @apiParam {string} str 需要处理的字符串
         * @apiParam {Number=0,1} [isDecodes = 0] 是否需要进行decodeURIComponent处理  0:否 1:是
         * @apiSuccess (return) {object} ret
         * @apiVersion 2.1.0
         */
    function _toObj(str, isDecode) {
        var ret = {}, c, t, len;
        str = str.replace(/\?/g, '&');
        c = str.split('&');
        len = c.length;
        for (var i = 0; i < len; ++i) {
            if (!(c[i].indexOf('=') < 0)) {
                t = c[i].split('=');
                ret[t[0]] = isDecode ? decodeURIComponent(t[1]) : t[1];
            }
        }

        return ret;
    }

    /**
     * 过滤非法html字符
     * @author sharkyang
     * @since 2017-07-25
     * @apiParam {string} str 要编码的字符串
     * @return {string} 返回对内容'<>&'编码后的字符串
     *          注该方法仅对于需要输入到html内的内容是相对安全的。
     * @private
     ***/
    function _html_safe(str) {
        str = (str || '') + '';
        if (str) {
            str = str.replace(/&/g, '&amp;')
                .replace(/</g, '&lt;')
                .replace(/>/g, '&gt;')
                // .replace(/≤/g, '&le;')
                // .replace(/≥/g,'&ge;')
                ;
        }
        return str;
    }

    /**
     * @apiExample 示例
     * var str = '你好,{1}！我是{2}.这里的内容{0}不会替换.
     *  _fmt(str,'Jim','Allen');
     * //输出:你好，Jim!我是Allen.这里的内容{0}不会替换.
     * 
     * @apiExample 功能
     * 字符串格式化.对字符串中的{数字}内容使用依次提供的参数替换.替换参数索引从1开始
     * @apiName format
     * @apiGroup GY.Util.string
     * @api {~} GY.Util.string.format format格式化字符串
     * @author sharkyang
     * @since  2017-07-25
     * @apiParam {string} str
     
     * @apiSuccess (return) {string} str
     * @apiVersion 2.1.0
     */
    function _fmt(str) {
        str = str || '';
        var args = arguments, al = args.length;
        str = str.replace(/\{(\d+)\}/g, function (a, b) {
            b = b - 0;
            //
            if (isNaN(b) || b <= 0 || b > al) {
                return a;
            } else {
                return args[b];
            }
        });
        return str;
    }

    /**
     * 将对象转换为字符串表示方式
     * @param {any} obj 
     * @returns {string}
     * @private
     */
    function _get_str(obj) {
        if (typeof obj == 'string') {
            return obj;
        } else if (obj === void (0)) {
            return 'undefined';
        } else if (obj instanceof Date) {
            return (GY.Util && GY.Util.time && GY.time.formatDate(obj)) || String(obj);
        } else if (!obj) {
            return obj;
        } else {
            return (GY.Util && GY.Util.object && GY.Util.object.toString(obj)) || String(obj);
        }
    }

    /**
     * @apiExample 使用示例
     * GY.Util.string.getCStrLen('你好');    //4
     * @apiExample 功能
     * 获取字符串长度，其中中文字符长度认为是 2
     * @apiGroup GY.Util.string
     * @apiName getCStrLen
     * @api {~} GY.Util.string.getCStrLen getCStrLen计算长度
     *  
     * @apiParam {string} str
     * @apiSuccess (return) {number} len
     * @apiVersion 2.1.0
     */
    function _getCStrLen(str) {
        var len = 0;
        for (var i = 0; i < str.length; ++i) {
            len += (str.charCodeAt(i) > 127 || str.charCodeAt(i) == 94) ? 2 : 1;
        }
        return len;
    }

    /**
     * @apiExample 使用示例
     * GY.Util.string.getSubCStr('123456', 1, 2);   //"3456"
     * @apiExample 功能
     * 裁剪字符串：先根据下标start计算出字符权重，作为新的起始下标, length也转换为字符权重作为新的长度。
     * 
     * @apiGroup GY.Util.string
     * @apiName getSubCStr
     * @api {~} GY.Util.string.getSubCStr getSubCStr裁剪字符串
     * @apiParam {string} str 要裁剪的字符串
     * @apiParam {number} start 起始下标
     * @apiParam {number} [length] 裁剪长度
     * @apiSuccess (return) {string} str
     *  @apiVersion 2.1.0
     */
    function _getSubCStr(str, start, length) {
        var s = resetStart(str, start);
        return length ? str.substr(s, findEndIndex(str, s, length) - s + 1) : str.substr(s);
    }

    /**
     * @apiExample 使用示例
     * GY.Util.string.getSubCString('1234567890',0,3);   //"123456"
     * @apiExample 功能
     * 根据起始和结束下标裁剪
     * @apiGroup GY.Util.string
     * @apiName getSubCString
     * @api {~} GY.Util.string.getSubCString getSubCString裁剪字符串
     * @apiParam {string} str 要裁剪的字符串
     * @apiParam {number} start 起始下标
     * @apiParam {number} [end] 结束下标
     *@apiSuccess (return) {string} str
     *  @apiVersion 2.1.0
     */
    function _getSubCString(str, start, end) {
        var s = resetStart(str, start);
        return end ? str.substring(s, findEndIndex(str, s, end - start)) : str.substring(s);
    }

    /**
     * 
     * @apiExample 功能
     * 去掉字符串中的 HTML 标签
     * @apiGroup GY.Util.string
     * @apiName toSafe
     * @api {~} GY.Util.string.toSafe toSafe特殊字符转换
     * @apiParam {string} str
     * @apiParam {boolean} [useHtmlSafes=false] useHtmlSafe false:使用新库方法  true:使用旧方法
     * @apiSuccess (return) {string} str
     *  @apiVersion 2.1.0
     */
    function _toSafe(str, useHtmlSafe) {
        //为保证原来库的兼容添加
        if (useHtmlSafe) {
            return _html_safe(str);
        } else {
            return str.replace(/&amp;/g, '')
                .replace(/&gt;/, '')
                .replace(/&lt;/g, '')
                .replace(/quot;/g, '')
                .replace(/#39;/g, '')
                .replace(/&/g, '')
                .replace(/>/g, '')
                .replace(/</g, '')
                .replace(/"/g, '')
                .replace(/'/g, '')
                .replace(/%3C/g, '')
                .replace(/%3c/g, '')
                .replace(/%3E/g, '')
                .replace(/%3e/g, '')
                .replace(/%+\/v8/g, '');
        }
    }

    /**
     * 用于字符串裁剪，重定位起始位置
     * @private
     * */
    function resetStart(str, start) {
        var ptr = 0, i = 0;
        while (i < start) {
            i += getCharWeight(str, ptr);
            ptr++;
        }
        // 加 0.1 是为了避免精度问题出现 `n > n == true` 的情况
        return (i > (start + 0.1)) ? ptr - 1 : ptr;
    }

    /**
     * 用于字符串裁剪，定位结束位置
     * @private
     * */
    function findEndIndex(str, s, length) {
        var l = 0, e;
        for (e = s; e < str.length; ++e) {
            l += getCharWeight(str, e);
            if (l > length) {
                break;
            }
        }
        return e;
    }

    /**
     * 计算字符的权重
     * @private
     * */
    function getCharWeight(str, i) {
        return (str.charCodeAt(i) > 127 || str.charCodeAt(i) == 94) ? 1 : 0.5;
    }

    (!String.prototype.htmlSafe) && (String.prototype.htmlSafe = function () {
        return _html_safe(this);
    });

    (!String.prototype.format) && (String.prototype.format = function () {
        var arg = Array.prototype.slice.call(arguments, 0, arguments.length);
        arg.unshift(this);
        return _fmt.apply(null, arg);
    });

    GY.extend(nameSpace, {
        toObj: _toObj,
        toSafe: _toSafe,

        htmlSafe: _html_safe,

        format: _fmt,
        getCStrLen: _getCStrLen,
        getSubCStr: _getSubCStr,
        getSubCString: _getSubCString
    });

})("Util.string");


;(function (namespace) {

    /**
     * @apiExample  用法示例
     * GY.Util.number.format(123456);  //"123,456"
     * @apiExample  功能
     * 1.将传参n转化为整形数据，有小数点的舍弃小数点，再转换为string类型。
     *
     * 2.每3位加1个逗号
     *
     * @apiName format
     * @apiGroup GY.Util.number
     * @api {~} GY.Util.number.format  格式化数值format
     * @apiParam {object} n 需要处理的数值 类型：string， Number
     * @apiSuccess (return) {string} str 格式化后的数值
     * @apiVersion 2.1.0
     */
    function _format(n) {
        var b = parseInt(n).toString();
        var len = b.length;
        if (len <= 3)
            return b;

        var r = len % 3;
        if (r > 0)
            return b.slice(0, r) + ',' + b.slice(r, len).match(/\d{3}/g).join(',');

        return b.slice(r, len).match(/\d{3}/g).join(',');
    }

    /**
     * @apiExample  用法示例
     * 1.GY.Util.number.safeMath(123.1,456.1,"+");   //579.2
     *
     * 2.GY.Util.number.safeMath(123.1,456.1,"-");   //-333
     *
     * 3.GY.Util.number.safeMath(123.1,456.1,"*");  //56145.91
     *
     * 4.GY.Util.number.safeMath(123.1,456.1,"/");  //0.26989695242271433
     *
     * @apiExample 功能
     *
     * 对于 JS 可能出现的一些浮点计算时候出现的精度问题做了一些处理
     *
     * 1.加运算：以小数点后位数最多的那位数取一个量级（`10^n`），比如小数点后有3位，就取1000作为量级。a和b统一乘以量级数，进行算术运算后，用结果再除以这个量级数。
     *
     * 2.减运算：将b变成-b，使用加运算。
     *
     * 3.乘运算：分别将a、b乘以`10^n`，n是小数点后位数。做完乘法运算、再除以两个数各自的`10^n`。
     *
     * 4.除运算：分别将a、b乘以`10^n`，n是小数点后位数。做完除法运算、再乘以两个`10^n`除后的结果。
     *
     * @apiName safeMath
     * @apiGroup GY.Util.number
     * @api {~} GY.Util.number.safeMath  算术运算
     * @apiParam {number} a 操作数值
     * @apiParam {number} b 操作数值
     * @apiParam {string='+',  '-',  '*',  '/'} op  运算符
     * @apiSuccess (return) {float} result 计算结果
     * @apiVersion 2.1.0
     */
    function _safeMath(a, b, op) {
        switch (op) {
            case '+':
                return safeAdd(a, b);
            case '-':
                return safeCut(a, b);
            case '*':
                return safeMul(a, b);
            case '/':
                return safeDiv(a, b);
        }

        function safeAdd(a, b) {
            //取两个数中小数点后位数最多的那位，统一乘以一个量级，进行算术运算后，用结果再除以这个量级。
            var n = Math.max(getTimes(a), getTimes(b));
            if ((a * n + b * n) / n == a + b) {
                return a + b;
            } else {
                return Math.round(a * n + b * n) / n;
            }
        }

        function safeCut(a, b) {
            return safeAdd(a, -b);
        }

        function safeMul(a, b) {
            return floatToInteger(a) * floatToInteger(b) / (getTimes(a) * getTimes(b));
        }

        function safeDiv(a, b) {
            return (floatToInteger(a) / floatToInteger(b)) * (getTimes(b) / getTimes(a));
        }

        function floatToInteger(n) {
            return Number(n.toString().replace('.', ''));
        }
        /**
         * 求小数点后有多少位
         * @apiParam {string} a
         * @private
         */
        function getTimes(a) {
            var s = ('' + a).split('.')[1];
            return Math.pow(10, s ? s.length : 0);
        }
    }

    /**
     * @apiExample 使用示例
     * 1.GY.Util.number.safeToFixed(123.3 ,0);  //"123"
     *
     * 2.GY.Util.number.safeToFixed(123.3 ,2);  //"123.30"
     *
     * @apiExample 功能
     * 处理数字小数点
     * @apiName safeToFixed
     * @apiGroup GY.Util.number
     * @api {~} GY.Util.number.safeToFixed  处理数字小数点
     * @apiParam {number} n
     * @apiParam {number} digits 位数
     * @apiSuccess (return) {string} result 计算结果
     * @apiVersion 2.1.0
     */
    function _safeToFixed(n, digits) {
        var times = Math.pow(10, digits);
        var r =  '' + parseInt(_safeMath(n, times, '*') + 0.5) / times;
        var s = r.split('.')[1];
        if (s) {
            if (s.length < digits) {
                return r.concat('0');
            }
            return r;
        } else if(digits == 0){
            return r;
        }else {
            return r.concat('.', new Array(digits + 1).join('0'));
        }
    }

    /**
     * @apiExample 使用示例
     * 1.GY.Util.number.toChiness(100);  // 一百
     *
     * 2.GY.Util.number.toChiness(10101.01);  // 一万零一百零一点零一
     *
     * @apiExample 功能
     * 阿拉伯数字转成中文数字，如果有小数，至多截取两位，
     * @apiName toChiness
     * @apiGroup GY.Util.number
     * @api {~} GY.Util.number.toChiness  阿拉伯数字转成中文数字
     * @apiParam {number} n 输入不能大于99999.99
     * @apiSuccess (return) {string} result 输出
     * @apiVersion 2.1.0
     */
    function _toChiness(n) {
        n = parseFloat(n);
        if (isNaN(n)) {
            console.error('TypeError in Number to Chiness.');
            return false;
        }
        if (n > 99999.99) { // 十万了报错
            console.error('RangeError in Number to Chiness.');
            return false;
        }

        var sn = String(n);
        var integer, tail;
        var k = sn.indexOf('.');
        if (k > -1) {
            integer = sn.slice(0, k);
            tail = sn.slice(k + 1);
        } else {
            integer = sn;
            tail = '';
        }
        var UNITS = ['', '十', '百', '千', '万'];
        var NUMBER = ['零', '一', '二', '三', '四', '五', '六', '七', '八', '九'];

        var r = '';

        for (var i = 0; i < integer.length; ++i) {
            if (parseInt(integer[i])) {
                r += NUMBER[parseInt(integer[i])] + UNITS[integer.length - i - 1];
            } else {
                r += '零';
            }
        }

        if (tail) {
            r += '点';
            r += NUMBER[parseInt(tail[0])];
            r += tail[1] ? NUMBER[parseInt(tail[1])] : '';
        }

        var edot = encodeURIComponent('点');
        var ezero = encodeURIComponent('零');

        var reg = new RegExp('((' + ezero + ')+)', 'g');
        var reg2 = new RegExp('(?!' + edot + ')' + ezero + '$');
        var rr = encodeURIComponent(r)
            .replace(reg, ezero)
            .replace(encodeURIComponent('零点'), edot)
            .replace(reg2, '');
        if (rr.indexOf(edot) == 0) {
            rr = ezero + rr;
        }
        return decodeURIComponent(rr);
    }

    GY.extend(namespace, {
        format: _format,
        safeMath: _safeMath,
        safeToFixed: _safeToFixed,
        toChiness: _toChiness
    })
})("Util.number");

;(function (nameSpace) {
    /**
     * @apiExample 使用示例
     * 1.GY.Util.object.toStr({"a":"你好","b":2}, 0)    //"a=你好&b=2"
     * 
     * 2.GY.Util.object.toStr({"a":"你好","b":2}, 1)    //"a=%E4%BD%A0%E5%A5%BD&b=2"
     * 
     * @apiExample 功能
     * 对象转换为字符串
     * @apiName toStr
     * @apiGroup GY.Util.object
     * @api {~} GY.Util.object.toStr object转换为string
     * @apiParam {object} obj
     * @apiParam {boolean=false,true} [isEncode=false]  false:不对value值进行encode加密   true:对value值进行encode加密
     * @apiSuccess (return) {string} result 字符串
     * @apiVersion 2.1.0
     */
    function _objectToStr(obj, isEncode) {
        var key, value, result = '';
        for (key in obj) {
            if (obj.hasOwnProperty(key) && 'undefined' !== typeof obj[key]) {
                value = isEncode ? encodeURIComponent(obj[key]) : obj[key];
                result += key + '=' + value + '&';
            }
        }
        return result.slice(0, result.length - 1);
    }
    /**
     * @apiExample 使用示例
     * GY.Util.object.toString({"a":1});   //"{"a":1}" 
     * @apiExample 功能
     * 对象转换为字符串
     * @apiGroup GY.Util.object
     * @apiName toString
     * @api {~} GY.Util.object.toString 对象转换为字符串
     * @apiParam { object } a   类型：string | array | object | number
     * @apiSuccess (return) {string} result 字符串
     * @apiVersion 2.1.0
     */
    function _objectToString(a){
        var c, d, e, f, g, b = this;
        switch (typeof a) {
            case "string":
                return '"' + a.replace(/(["\\])/g, "\\$1") + '"';
            case "array":
                return "[" + a.map(_objectToString).join(",") + "]";
            case "object":
                if (a instanceof Array) {
                    for (c = [], d = a.length, e = 0; d > e; e++) c.push(_objectToString(a[e]));
                    return "[" + c.join(",") + "]"
                }
                if (null == a) return "null";
                f = [];
                for (g in a) f.push(_objectToString(g) + ":" + _objectToString(a[g]));
                return "{" + f.join(",") + "}";
            case "number":
                return a;
            case !1:
                return a
        }
    }

    /**
     * @apiExample 使用示例
     * GY.Util.object.extend(obj_a, obj_b, true);
     * @apiExample 功能
     * 1.拓展对象，默认浅拓展，把最后一个参数设置为 true 则进行深拓展
     * 
     * 2.第一个参数为拓展的目标对象，随后都是用于拓展的对象
     * 
     * 3.最后一个参数为布尔值，默认为 false, 设置为 true 则执行深拓展
     * 
     * @apiGroup GY.Util.object
     * @apiName extend
     * @api {~} GY.Util.object.extend extend
     * @apiParam {object} obj1
     * @apiParam {object} obj2
     * @apiParam {boolean} [isDeepExtend=false]
     * @apiSuccess (return) {json}  result 
     * @apiSuccess (return) {array}  result 
     * @apiVersion 2.1.0             
     *              
     * 
     */
    function _extend() {
        var name, // 待拷贝的键
            copy, // 待拷贝的值
            copyIsArray,
            clone,
            isDeep = false,
            options, // 源对象
            src,
            target = arguments[0] || {},
            len = arguments.length;

        if (typeof target !== 'object') {
            target = {};
        }
        if (typeof arguments[len - 1] === 'boolean') {
            isDeep = arguments[len - 1];
        }
        for (var i = 1; i < len; ++i) {
            if ((options = arguments[i]) != null) {
                for (name in options) {
                    if (options.hasOwnProperty(name)) {
                        src = target[name];
                        copy = options[name];
                        // 防止自引用引起无限循环
                        if (target == copy)
                            continue;

                        // 深拓展
                        if (isDeep && copy && ((copyIsArray = _isObjectByType(copy, 'Array')) || _isObject(copy))) {
                            if (copyIsArray) {
                                copyIsArray = false;
                                clone = src && _isArray(src) ? src : [];
                            } else {
                                clone = src && _isObject(src) ? src: {};
                            }
                            target[name] = _extend(clone, src, true);
                        } else if (copy != undefined) {
                            // 拓展
                            target[name] = copy;
                        }
                    }
                }
            }
        }

        return target;
    }

    /**
     * @apiExample 使用示例
     * GY.Util.object.clone(obj);
     * 
     * @apiExample 功能
     * 深复制，如果复制的参数指向的不是一个对象，则返回空对象。
     * @apiGroup GY.Util.object
     * @apiName clone
     * @api {~} GY.Util.object.clone 深复制clone
     * @apiParam obj
     * @apiSuccess (return) {array}  result 
     * @apiSuccess (return) {json}  result 
     * @apiVersion 2.1.0
     */
    function _clone(obj) {
        var name, value;
        var target = _isArray(obj) ? [] : {};
        if (_isObject(obj)) {
            for (name in obj) {
                if (obj.hasOwnProperty(name) && obj[name]) {
                    value = obj[name];
                    if (_isObject(value)) {
                        target[name] = _clone(value);
                    } else {
                        target[name] = value;
                    }
                }
            }
        }
        return target;
    }

    /**
     * @apiExample 使用示例：
     * GY.Util.object.isObjectByType({"a":1}, 'Object');   //true
     * 
     * @apiExample 功能:
     * 判断对象的类型（function? event?...）
     * @apiGroup GY.Util.object
     * @apiName isObjectByType
     * @api {~} GY.Util.object.isObjectByType 判断对象的类型
     * @apiParam {object} object 需要比对的数据
     * @apiParam {string} [type='Object'] 需要比对的类型
     * @apiSuccess (return) {boolean}  result  
     * @apiVersion 2.1.0
     */
    function _isObjectByType(object, type) {
        return Object.prototype.toString.call(object) === '[object ' + (type || 'Object') + ']';
    }

    /**
     * @apiExample 使员示例
     * GY.Util.object.isObject({"a":1});    //true
     * @apiExample 功能
     * 判断是否为object 对象
     * @apiGroup GY.Util.object
     * @apiName isObject
     * @api {~} GY.Util.object.isObject 判断object对象
     * @apiParam {object} obj 需要判断的数据
     * @apiSuccess (return) {boolean}  result  false:空或不存在的object  true:是object对象
     * @apiVersion 2.1.0
     */
    function _isObject(obj) {
        var type = typeof obj;
        return type === 'object' && !!obj;
    }

    /**
     * @apiExample 使用示例
     * GY.Util.object.isEmptyObject({});    //true
     * @apiExample 功能
     * 判断是否为空对象
     * @apiGroup GY.Util.object
     * @apiName isEmptyObject
     * @api {~} GY.Util.object.isEmptyObject 判断空object
     * @apiParam {object} obj 需要判断的数据
     * @apiSuccess (return) {boolean} result   true:空或存在的object  false:非空object
     * @apiVersion 2.1.0
     */
    function _isEmptyObject(obj) {
        if (_isObject(obj)) {
            for (var n in obj) {
                return false;
            }
        }
        return true;
    }

    /**
     * @apiExample 使用示例
     * GY.Util.object.isArray({'a':1});   //false
     * @apiExample 功能
     * 判断是否为数组
     * @apiName isArray
     * @apiGroup GY.Util.object
     * @apiParam {array} obj  需要判断的数据
     * @api {~} GY.Util.object.isArray 判断空Array
     * @apiSuccess (return) {boolean} result   true:是数组  false:非数组
     * @apiVersion 2.1.0
     */
    function _isArray(obj) {
        return Array.isArray(obj) || _isObjectByType(obj, 'Array');
    }

    /**
     * @apiExample 使用示例
     * 1.GY.Util.object.includes({"a":1, "b":1}, {"a":1});   //true
     * 2.GY.Util.object.includes(["q","b"], "q");           //true
     * @apiExample 功能
     * 1.判断value是否在object数组中
     * 
     * 2.判断value是否在object对象中
     * @apiGroup GY.Util.object
     * @apiName includes
     * @api {~} GY.Util.object.includes  includes
     * @apiParam {object} object  需要判断的数据源 类型:json,array
     * @apiParam {object} value  需要判断的数据
     * @apiSuccess (return) {boolean} result   true:value在object中  false:value不在object中
     * @apiVersion 2.1.0 
     */
    function _includes(object, value) {
        if (_isArray(object)) { // 数组
            return object.indexOf(value) > -1;
        } else { // 一般对象
            if (!_isObject(value))
                return false;
            var flag = true;
            for (var kv in value) {
                if (value.hasOwnProperty(kv)) {
                    if (object[kv] != value[kv]) {
                        flag = false;
                        break;
                    }
                }
            }
            return flag;
        }
    }

    GY.extend(nameSpace, {
        clone: _clone,
        extend: _extend,
        toStr: _objectToStr,
        toString : _objectToString,
        isObject: _isObject,
        isObjectByType: _isObjectByType,
        isEmptyObject: _isEmptyObject,
        isArray: _isArray,
        includes: _includes
    });

})("Util.object");


;(function (cookieNS, localStorageNS, $) {

    var _decodeMethod = ['decodeURIComponent', 'decodeURI', 'unescape'];

    /**
     * @description 初始化 GY.Util.cookie 对象，设置属性
     * @apiExample 使用示例
     * GY.Util.cookie;
     * 
     * @apiGroup GY.Util
     * @apiName cookie
     * @api {~} GY.Util.cookie  cookie对象
     * @apiSuccess (return) {string}  appid 
     * @apiSuccess (return) {string}  dbg 访问模式 1:灰度环境  2:生产环境
     * @apiSuccess (return) {string}  gy_wx_uFace 微信头像
     * @apiSuccess (return) {string}  gy_wx_uNick 微信昵称
     * @apiSuccess (return) {string}  gy_wx_unionid  微信unionid 
     * @apiSuccess (return) {string}  myHd  在平台账户头像
     * @apiSuccess (return) {string}  myNick  在平台账户昵称
     * @apiSuccess (return) {string}  oid  在平台账户oid
     * @apiVersion 2.1.0 
     */
    function _initCookieObj() {
        var cookieObj = {};
        var arrCookie = document.cookie.split('; ');
        Object.defineProperty(cookieObj, 'set', {
            enumerable: false,
            writable: true,
            configurable: false,
            value: _setCookie
        });

        Object.defineProperty(cookieObj, 'get', {
            enumerable: false,
            writable: true,
            configurable: false,
            value: _getCookie
        });

        Object.defineProperty(cookieObj, 'del', {
            enumerable: false,
            writable: true,
            configurable: false,
            value: _delCookie
        });

        Object.defineProperty(cookieObj, 'length', {
            enumerable: false,
            writable: true,
            configurable: false,
            value: 0
        });

        if (!!arrCookie[0]) {
            var len = arrCookie.length;
            for (var i = 0; i < len; ++i) {
                var arr = arrCookie[i].split('=');
                for (var j in _decodeMethod) {
                    try {
                        cookieObj[ arr[0] ] = window[_decodeMethod[j]](arr[1]);
                    } catch (e) {}

                    if (cookieObj[ arr[0] ])
                        break;
                }
                if (!cookieObj[ arr[0] ])
                    cookieObj[ arr[0] ] = arr[1];
                // cookieObj[ arr[0] ] = decodeURIComponent(arr[1]);
            }
            cookieObj.length = len;
        }

        return cookieObj;
    }

    /**
     * @function
     * @description 设置 cookie
     * @param {string} name cookie 名
     * @param {string | number} value cookie 值
     * @param {object} [attributes = {}] cookie 的其他参数
     *                 {
     *                     expires: ...,
     *                     domain: ...,
     *                     path: ...,
     *                     secure: ...
     *                 }
     * @return {string} document.cookie
     * @private
     */
    function _setCookie(name, value, attributes) {
        if (!name) return document.cookie;
        attributes = attributes || {};
        var cookieString = name + '=' + encodeURIComponent(value);

        if (typeof attributes.expires === 'number') { // 单位为天
            var expires = new Date();
            expires.setTime(expires.getTime() + 86400000 * attributes.expires);
            attributes.expires = expires;
        }
        // 更新 GyUtil.cookie 对象
        this[name] || this.length++;
        this[name] = value;

        document.cookie = [
            cookieString,
            attributes.expires ? '; expires=' + attributes.expires : '',
            attributes.path ? '; path=' + attributes.path : '',
            attributes.domain ? '; domain=' + attributes.domain : '',
            attributes.secure ? '; secure=' + attributes.secure : ''
        ].join('');

        return document.cookie;
    }

    /**
     * @function
     * @description 获取 cookie
     * @apiParam {string} name
     * @return {*}
     * @private
     */
    function _getCookie(name) {
        if (!name) return;

        var arrCookie = document.cookie.split('; ');
        for (var i = 0; i < arrCookie.length; ++i) {
            var arr = arrCookie[i].split('=');
            if (arr[0] == name) {
                if (this[name]) { // 如果已经缓存在 cookie 对象，则更新
                    this[name] = arr[1];
                } else {
                    this[name] = arr[1];
                    this.length++;
                }
                return decodeURIComponent(arr[1]);
            }
        }
        return undefined;
    }

    /**
     * @function
     * @description 删除 cookie
     * @apiParam {string} name
     * @apiParam {string} domain
     * @apiParam {string} path
     * @private
     */
    function _delCookie(name, domain, path) {
        if (!name) return;
        var cookieString = name + '=' + encodeURIComponent('undefined');
        var date = new Date(1970); // 又回到最初的起点
        cookieString += '; expires=' + date.toGMTString();

        if (domain) {
            cookieString += '; domain=' + domain;
        }
        if (path) {
            cookieString += '; path=' + path;
        }

        document.cookie = cookieString;
        if (name !== 'length') {
            delete this[name];
            this.length--;
        }
    }

    /**
     * @apiExample  功能
     * 设置 localStorage
     * @apiName set
     * @apiGroup GY.Util.localStorage
     * @api {~} GY.Util.localStorage.set set设置本地缓存
     * @apiParam {string} key
     * @apiParam {object} value
     * @apiVersion 2.1.0
     */
    function _setLocalStorage(key, value) {
        localStorage.setItem(key, value);
    }

    /**
     * @apiExample  功能
     *  获取 localStorage
     * @apiName get
     * @apiGroup GY.Util.localStorage
     * @api {~} GY.Util.localStorage.get get读取本地缓存
     * @apiParam {string} key
     * @apiSuccess (return) {object} result
     * @apiVersion 2.1.0
     */
    function _getLocalStorage(key) {
        return localStorage.getItem(key);
    }

    /**
     * @apiExample  功能
     * 上删除 localStorage
     * @apiName del
     * @apiGroup GY.Util.localStorage
     * @api {~} GY.Util.localStorage.del del删除本地缓存
     * @apiParam {string} key
     * @apiVersion 2.1.0
     */
    function _delLocalStorage(key) {
        localStorage.removeItem(key);
    }

    /**
     * @apiExample 使用示例
     * GY.Util.setStorage('open','123')
     * @apiExample 功能
     * 同时设置 LocalStorage 和 Cookie
     * @apiName setStorage
     * @apiGroup GY.Util
     * @api {~} GY.Util.setStorage  setStorage设置缓存
     * 
     * @apiParam {string} key 
     * @apiParam {object} value
     * @apiVersion 2.1.0
     */
    function _setStorage(key, value) {
        _setLocalStorage(key, value);
        GY.Util.cookie.set(key, value)
    }

    /**
     * @apiExample 使用示例
     * GY.Util.getStorage('open');
     * @apiExample 功能
     * 读取 LocalStorage 或 Cookie 中存在的 key
     * @apiName getStorage
     * @apiGroup GY.Util
     * @api {~} GY.Util.getStorage  getStorage读取缓存
     * @apiParam {string} key
     * @apiSuccess (return) {object} result
     * @apiVersion 2.1.0
     */
    function _getStorage(key) {
        return _getLocalStorage(key) || GY.Util.cookie.get(key);
    }

    /**
     * @apiExample 使用示例
     * GY.Util.delStorage('open');
     * @apiExample 功能
     * 删除 LocalStorage 和 Cookie 中的 key
     * @apiName delStorage
     * @apiGroup GY.Util
     * @api {~} GY.Util.delStorage  delStorage删除缓存
     * @apiParam {string}  key
     * @apiVersion 2.1.0
     */
    function _delStorage(key) {
        _delLocalStorage(key);
        GY.Util.cookie.del(key);
    }

    
   
    var LS = localStorage || sessionStorage;    
    /**
     * @apiExample 功能：
     * storage 读写操作
     * @apiName storage
     * @apiGroup  GY.Util
     * @api {~} GY.Util.storage storage读写操作
     * @apiParam {string} k  storage键名
     * @apiParam {object}    [v]  要存储的内容（支持所有基本类型）。如果不传该值或设置为undefined，则读取键对应的内容
     * @apiParam {number}  [afterSecs] 指定若干秒后过期-可不设置  默认：3600 * 24*1000  单位:毫秒
     * @author sharkyang
     * @apiSuccess (return) {object} value 如果未设置v或v为undefined 则返回键对应的内容
     * @apiVersion 2.1.0     
     **/
    function _lstory(k, v,afterSecs) {
        var curd = new Date().getTime();
        if (v == void (0)) {
            //读
            var d;
            try {
                d = JSON.parse(LS.getItem(k) || 'null');
            } catch (e) {
                d = null;
            }
            if (!d || d.e < curd) {
                LS.removeItem(k);
                return null;
            } else {
                return d.d;
            }
        } else {
            //写
            var expr = curd+(afterSecs || 3600 * 24 * 1000);
            LS.setItem(k, JSON.stringify({ e: expr, d: v }));
        }
    }
    GY.extend(cookieNS, _initCookieObj());
    GY.extend(localStorageNS, {
        set: _setLocalStorage,
        get: _getLocalStorage,
        del: _delLocalStorage
    });
    GY.extend("Util",{
        setStorage:_setStorage,
        getStorage:_getStorage, 
        delStorage: _delStorage,
        storage:_lstory
    });


})("Util.cookie","Util.localStorage", window.Zepto || window.jQuery);


; (function (nameSpace) {
    /**
     *@apiExample  使用示例
     * 1.按unix时间戳比较  GY.Util.time.diffDate('2017-09-24 09:00:01', '2017-09-25 09:00:02', 'u')    //86401000
     * 
     * 2.按秒比较     GY.Util.time.diffDate('2017-09-24 09:00:01', '2017-09-25 09:00:02', 's')   //86401
     * 
     * 3.按分比较     GY.Util.time.diffDate('2017-09-24 09:00:01', '2017-09-25 09:00:02', 'm')   //1440
     * 
     * 4.按时比较     GY.Util.time.diffDate('2017-09-24 09:00:01', '2017-09-25 09:00:02', 'h')   //24
     * 
     * 5.按日期比较   GY.Util.time.diffDate('2017-09-24 09:00:01', '2017-09-25 09:00:02', 'd')  //1
     * 
     * 6.按月比较    GY.Util.time.diffDate('2017-09-24 09:00:01', '2017-09-25 09:00:02', 'M')  //0
     * 
     * 7.按年比较    GY.Util.time.diffDate('2017-09-24 09:00:01', '2017-09-25 09:00:02', 'y')  //0
     * 
     * @apiExample  功能
     * 计算时间差,不会返回负值
     * @apiName diffDate
     * @apiGroup GY.Util.time
     * @api {~} GY.Util.time.diffDate diffDate时间差
     * @apiParam {object} startDate 起始时间  object值：Date | string | number
     * @apiParam {object} endDate 结束时间  object值：Date | string | number
     * @apiParam {string} format  ['s','m','h', 'd', 'M', 'y']时间格式，如“M” (M 表示月份，m 表示分钟) 
     * @apiSuccess (return) {number} number 
     * @apiVersion 2.1.0
     */
    function _diffDate(startDate, endDate, format) {
        if (typeof startDate === 'string') {
            // safari 兼容
            startDate = startDate.replace(/-/g, '/');
        }
        if (typeof endDate === 'string') {
            // safari 兼容
            endDate = endDate.replace(/-/g, '/');
        }
        var s = new Date(startDate);
        var e = new Date(endDate);
        if (parseInt(e - s) < 0) { // 防止前后参数倒置
            var t = s;
            s = e;
            e = t;
        }
        switch (format) {
            case 'u': // unix
                return parseInt(e - s);
            case 's': // second
                return parseInt((e - s) / 1000);
            case 'm': // minute
                return parseInt((e - s) / 60000);
            case 'h': // hour
                return parseInt((e - s) / 3600000);
            case 'd': // day
                return parseInt((e - s) / 86400000);
            case 'w': // week
                return parseInt((e - s) / (86400000 * 7));
            case 'M': // month
                return (e.getMonth() + 1) + ((e.getFullYear() - s.getFullYear()) * 12) - (s.getMonth() + 1);
            case 'y': // year
                return e.getFullYear() - s.getFullYear();
        }
    }

    /**
     * @markdown
     *@apiExample  使用示例
     * 1.`GY.Util.time.smartDiffDate('2017-09-30 09:00:01', '2016-09-29 09:00:01')    //{n: 1, u: "y"}`
     * 
     * 2.`GY.Util.time.smartDiffDate('2017-09-30 09:00:01', '2017-08-29 09:00:01')    //{n: 1, u: "M"}`
     * 
     * 3.`GY.Util.time.smartDiffDate('2017-09-30 09:00:01', '2017-09-29 09:00:01')    //{n: 1, u: "d"}`
     * 
     * 4.`GY.Util.time.smartDiffDate('2017-09-30 09:00:01', '2017-09-29 23:00:01')    //{n: 10, u: "h"}`
     * 
     * 5.`GY.Util.time.smartDiffDate('2017-09-30 09:00:01', '2017-09-30 09:01:32')    //{n: 1, u: "m"}`
     * 
     * 6.`GY.Util.time.smartDiffDate('2017-09-30 09:00:01', '2017-09-30 09:00:32')    //{n: 31, u: "s"}`
     * 
     * @apiExample  功能
     * 计算时间差，智能返回最接近差值的单位和差值
     * @apiName smartDiffDate
     * @apiGroup GY.Util.time
     * @api {~} GY.Util.time.smartDiffDate smartDiffDate时间差
     * @apiParam {object} startDate object值：Date | string | number
     * @apiParam {object} endDate object值：Date | string | number
     * @apiSuccess (return) {object} object {n: number, u: string}
     * @apiVersion 2.1.0
     */
    function _smartDiffDate(startDate, endDate) {
        if (typeof startDate === 'string') {
            // safari 兼容
            startDate = startDate.replace(/-/g, '/');
        }
        if (typeof endDate === 'string') {
            // safari 兼容
            endDate = endDate.replace(/-/g, '/');
        }
        var s = new Date(startDate);
        var e = new Date(endDate);

        if (parseInt(e - s) < 0) { // 防止前后参数倒置
            var t = s;
            s = e;
            e = t;
        }
        var delta = parseInt(e - s);

        var result = {
            n: 0, // 时间长度
            u: 'ms' // 单位
        };

        if (delta % 1000 && parseInt(delta / 1000) == 0) { // 不超1000毫秒
            result.u = 'ms';
            result.n = delta;
            return result;

        } else {//秒
            delta /= 1000;
            delta = ~~delta; //s
            result.u = 's';
            result.n = delta;
        }

        if (parseInt(delta / 60) == 0) {//不到60秒
            result.u = 's';
            result.n = delta;
            return result;
        } else {
            delta /= 60;
            delta = ~~delta;
            result.u = 'm';
            result.n = delta;
        }

        if (parseInt(delta / 60) == 0) {//不超60分钟
            result.u = 'm';
            result.n = delta;
            return result;
        } else {
            delta /= 60;
            delta = ~~delta;
            result.u = 'h';
            result.n = delta;
        }
        if (parseInt(delta / 24) == 0) {//不超过24小时
            result.u = 'h';
            result.n = delta;
            return result;
        } else {
            delta /= 24;
            delta = ~~delta;
            result.u = 'd';
            result.n = delta;
        }
        if (((e.getMonth() + 1) + ((e.getFullYear() - s.getFullYear()) * 12) - (s.getMonth() + 1)) > 0) { // month
            delta = (e.getMonth() + 1) + ((e.getFullYear() - s.getFullYear()) * 12) - (s.getMonth() + 1);
            result.u = 'M';
            result.n = delta;
        } else {
            return result;
        }

        if ((e.getFullYear() - s.getFullYear()) > 0) { // year
            delta = e.getFullYear() - s.getFullYear();
            result.u = 'y';
            result.n = delta;
        } else {
            return result;
        }

        return result;
    }

    /**
     * @apiExample 使用示例
     * GY.Util.time.diffTimeFromNow('2017-09-30 09:00:01', '2017-09-28 09:00:01');    //"2 天前"
     * @apiExample 功能
     * 计算时间间隔
     * @apiName diffTimeFromNow
     * @apiGroup GY.Util.time
     * @api {~} GY.Util.time.diffTimeFromNow diffTimeFromNow时间间隔
     * @apiParam {object} d  object值：Date | string 
     * @apiParam {object} [st] 默认是当前时间  object值：Date | string 
     * @apiSuccess (return) {string} str 一句描述
     * @apiVersion 2.1.0
     */

    function _diffTimeFromNow(d, st) {
        if (typeof d === 'string') {
            // safari 兼容
            d = d.replace(/-/g, '/');
        }
        st = st || window.op_time || '';

        var sd = st ? new Date(st) : new Date(), ed = new Date(d);
        var delta = Math.abs(sd - ed);
        var r = {};
        var gap = [
            1e3,
            60 * 1e3,
            60 * 60 * 1e3,
            24 * 60 * 60 * 1e3,
        ];
        var unit = [
            '刚刚',
            ' 秒前',
            ' 分钟前',
            ' 小时前',
            ' 天前',
        ];

        for (var i = 0; i < gap.length; ++i) {
            if (delta < gap[i]) {
                if (i == 0) {
                    return unit[0];
                }
                return ~~(delta / gap[i - 1]) + unit[i];
            }
        }


        var y = sd.getFullYear() - ed.getFullYear();
        var m = sd.getMonth() - ed.getMonth();

        if (y >= 0) {
            console.log('xxxx--->', d);
            //校准月数
            if (m < 0) {
                if (y == 0) {
                    //未来时间 ---本来是计算绝对值，为了方便出错追查，还是直接暴露时间吧。
                    return d;
                }
                m = 12 + m;
                y--;
            }

            //不足一个月的
            var days = sd.getDate() - ed.getDate();
            if (m > 0 && days < 0) {
                m--;
            }

            //没跨月，则显示天数
            if (m == 0 && y == 0) {
                return Math.abs(~~(delta / gap[i - 1])) + unit[i];
            }

            if (y) {
                return y + '年前';
            } else {
                return m + '个月前';
            }
        } else {
            //未来时间
            return d;
        }

        // // i == 5
        // var m = Math.abs(sd.getMonth() - ed.getMonth());
        // if (m == 0) {
        //     return ~~(delta / gap[i - 1]) + unit[i];
        // }

        // var y = Math.abs(sd.getFullYear() - ed.getFullYear());

        // if (y == 0) {
        //     return m + ' 个月前';
        // }

        // return y + ' 年前';
    }

    /**
     * @markdown
     *@apiExample  使用示例
     * 1.输出4位年份： GY.Util.time.formatDate('2017-09-24 09:00:00', 'yyyy')    //"2017"
     * 
     * 2.输出2位年份： GY.Util.time.formatDate('2017-09-24 09:00:00', 'yy')     //"17"
     * 
     * 3.输出月份  ： GY.Util.time.formatDate('2017-09-24 09:00:00', 'MM')      //"09"
     * 
     * 4.输出天数  ： GY.Util.time.formatDate('2017-09-24 09:00:00', 'dd')      //"24"
     * 
     * 5.输出小时  ： GY.Util.time.formatDate('2017-09-24 09:00:00', 'hh')      //"09"
     * 
     * 6.输出分钟  ： GY.Util.time.formatDate('2017-09-24 09:00:00', 'mm')      //"00"
     * 
     * 7.输出秒    ： GY.Util.time.formatDate('2017-09-24 09:00:00', 'ss')      //"00"
     * 
     * 8.输出时间  ： GY.Util.time.formatDate('2017-09-24 09:00:00', 'hh:mm:ss')   //"09:00:00"
     * 
     * 9.输出日期  ： GY.Util.time.formatDate('2017-09-24 09:00:00', 'yyyy-MM-dd') //"2017-09-24"
     * @apiExample  功能
     * 格式化时间
     * 
     * 注意：在手机微信/手Q/safari上var date1 = '2017-09-07 00:00:00'使用new Date(date1)转换时会报无效对象。所以，要将字符串中的'-'换成'/'
     * @apiName formatDate
     * @apiGroup GY.Util.time
     * @api {~} GY.Util.time.formatDate formatDate格式化时间
     * @apiParam {object} d 待格式化的时间，最好是 Date 类型，也支持能用于初始化 Date 对象的参数类型  object值：Date | string | number
     * @apiParam {string} format 默认格式为 yyyy-MM-dd hh:mm:ss
     * @apiSuccess (return) {string} str 格式化时间后的字符串
     * @apiVersion 2.1.0
     */
    function _formatDate(d, format) {
        if (typeof d === 'string') {
            // safari 兼容
            d = d.replace(/-/g, '/');
        }

        if (!(d instanceof Date)) {
            d = new Date(d);
        }
        if (!format) {
            format = 'yyyy-MM-dd hh:mm:ss';
        }
        var dateFormat = {
            "M+": d.getMonth() + 1,
            "d+": d.getDate(),
            "h+": d.getHours(),
            "m+": d.getMinutes(),
            "s+": d.getSeconds(),
            "q+": Math.floor((d.getMonth() + 3) / 3),
            "S+": d.getMilliseconds()
        };

        // 年份替换
        if (/(y+)/i.test(format)) {
            format = format.replace(RegExp.$1, (d.getFullYear() + '').substr(4 - RegExp.$1.length));
        }

        for (var k in dateFormat) {
            if (new RegExp('(' + k + ')').test(format)) {
                format = format.replace(RegExp.$1, RegExp.$1.length == 1 ?
                    dateFormat[k] : ('00' + dateFormat[k]).substr(('' + dateFormat[k]).length));
            }
        }
        return format;
    }

    /**
     *@apiExample  使用示例
     * GY.Util.time.dateToUnix("2017/09/30 09:00:01")   //1506733201
     * @apiExample  功能
     * 转换 Date 对象到 Unix 时间戳
     * 
     * 与GY.Util.time.unixToDate是互逆操作。
     * @apiName dateToUnix
     * @apiGroup GY.Util.time
     *  @api {~} GY.Util.time.dateToUnix dateToUnix时间戳
     * @apiParam {Date} date
     * @apiSuccess (return) {number} unixNumber Unix时间戳
     * @apiVersion 2.1.0
     */
    function _dateToUnix(date) {
        return Math.round((new Date(date)).getTime() / 1000);
    }

    /**
     *@apiExample  使用示例
     * var uTime = 1506733201;//单位是秒
     * GY.Util.time.unixToDate(uTime, 'yyyy/MM/dd hh:mm:ss')    //"2017/09/30 09:00:01"
     * @apiExample  功能
     * 转换 Unix 时间戳到 Date 对象，支持格式化
     *
     * 
     * @apiName unixToDate
     * @apiGroup GY.Util.time
     * @api {~} GY.Util.time.unixToDate unixToDate时间转化
     * @apiParam {number} unix         unix 时间戳
     * @apiParam {string} [format='yyyy-MM-dd hh:mm:ss']       格式化的格式
     * @apiParam {boolean} [isMillSecs=false]  是否毫秒数 false：unix单位是秒  true：unix单位是毫秒
     *  @apiSuccess (return) {string} dateString 时间字符串
     * @apiVersion 2.1.0
     */
    function _unixToDate(unix, format,isMillSecs) {
        if (format) {
            //Bugfix--如果未指定参数则自动根据数字长度判断
            if (!isMillSecs && (unix + '').length <= 10) {
                unix *= 1000;
            }

            return _formatDate(new Date(unix), format);
        }
        return new Date(unix);
    }

    /**
     * @function
     * @description 倒计时
     * @apiParam {object} param 参数对象
     *                  {
     *                      over: {function}, // 终止函数，当该函数返回值为真时，计时停止
     *                      duration: {number}, // 毫秒数，表示这个倒计时持续的时间
     *                      interval: {number}, // 毫秒数，表示 setInterval 的调用周期，默认为 1000。（1s）
     *                      endTime: {Date | string | number}, // 终止时间
     *                      callback: {function} // 想要在计时器中执行的函数
     *                  }
     *                  计时器结束条件由 over、duration、interval、endTime 中最早使得计时器结束的参数决定
     * @return {number | undefined} setInterval 的 id
     * @private
     */
    /*function _countdown(param) {
        param = param || {};

        var duration = param.duration, // (new Date()).getTime()
            endTime = param.endTime, // {Date | number}
            over = param.over, // {Function}
            interval = param.interval; // (new Date()).getTime()

        if (!duration && !endTime && !over && !interval) // 没有终止条件和计时周期，则该函数无意义，直接返回
            return ;

        var _duration = duration ? duration : undefined;
        var _timerId;

        var end = endTime ? new Date(endTime) : undefined;

        var _interval = interval ?
            (interval >= 0 ? interval : 1000) : 1000;

        if (_interval < 0) {
            interval = 1000;
        }

        return _timerId = setInterval(function () {
            if (typeof over === 'function') {
                if (over()) {
                    clearInterval(_timerId);
                    return ;
                }
            } else if (over) {
                clearInterval(_timerId);
                return ;
            }
            if (end && parseInt(end - (new Date())) <= 0) {
                clearInterval(_timerId);
                return ;
            }
            if (_duration) {
                _duration -= interval;
                if (_duration <= 0) {
                    clearInterval(_timerId);
                    return ;
                }
            }
            if (param.callback && typeof param.callback === 'function') {
                param.callback();
            }
        }, _interval);
    }
*/
    GY.extend(nameSpace, {
        formatDate: _formatDate,
        diffDate: _diffDate,
        smartDiffDate: _smartDiffDate,
        diffTimeFromNow: _diffTimeFromNow,
        unixToDate: _unixToDate,
        dateToUnix: _dateToUnix
        //,countdown: _countdown
    });

})("Util.time");

/**
 * @markdown
 * #####简单js模版--SJTemplator
 *@apiGroup  GY.tpl
 *##### 作者： sharkyang

 * @version 0.1.1
 *
 * @modify  2017.04
 *   - @version  => 0.1.1
 *   - 增加模版内$G对象支持模版内部绑定方法,隔离外部变量与模版减少变量及方法污染。
 *
 ***/
; (function (namespace, global) {
    /**
     *
     */


    var VER = '0.1.1';
    //txTpl = txTpl || global.txTpl;
    /**
     * @description 填充模版返回字符串
     * @apiParam {string} id 模版元素的 id
     * @apiParam {object} data 填充模版用的 data 对象
     * @return {*} 如果 id 对应的模版不存在，会返回 ''。正常情况下返回填充好数据后的模版字符串
     * @private
     */
    /*function _getHTML(id, data) {
     var d = document.getElementById(id);
     return d ? txTpl(document.getElementById(id).innerHTML, data) : '';
     }*/

     /**
     * @apiExample 使用示例
     * GY.tpl.$G.ADTAG ='1799rt';  //在模板中可以直接使用<%=$G.ADTAG%>
     * @apiExample 功能
     * 模板内嵌全局
     * 
     * @apiName $G
     * @apiGroup GY.tpl
     * @api {~} GY.tpl.$G   GY.tpl.$G模板
     * @apiSuccess (return) {object} object
     * @apiVersion 2.1.0
      */
    var _tmpFns = (function () {
        var fnRet = function () { };
        fnRet.prototype = GY;
        return new fnRet();
    })();

    //模版内私有方法
    var _prvt_fns = {
        safe: function (str) {
            return (str || '').replace(/&/g, '&amp;')
                .replace(/>/g, '&gt;')
                .replace(/</g, '&lt;');
        }
    };


    /**
     *  @apiExample 功能
     * 模板处理函数，填充模版并返回填充后的字符串
     * 
     * 1.模版中可以使用$tmpl(id,data)再调用另一个模版
     * 
     * 2.可以在模版中使用$errFn(xx) 抛出一个错误
     * 
     * 3.模版内可以通过调用$Echo(xx) 输出文本
     * 
     * 4.模版中$DATA指向填充模版的数据本身。
     * 
     * 5.模版中可以使用$G调用外部绑定的方法或函数
     * 
     * 6.如果需要在外部绑定模版内可用的函数列表，通过GY.tpl.$G.xxx=xx
     * 
     * @apiName getHTML
     * @apiGroup GY.tpl
     * @api {~} GY.tpl.getHTML getHTML模板处理
     * @apiParam    {String}     id  模版所在dom对象的id;或直接传模版内容（会根据内容中是否含模版分隔符来自动判断）
     * @apiParam    {Object}     data    填充模版用的数据对象(可以在模版中通过$DATA来直接调用，或直接使用data中的键调用对应的值)
     * @apiParam    {Boolean}    [cached]  是否缓存模版执行结果函数(默认会缓存模版解析结果为函数供后面继续使用)
     * @apiParam    {String}     [seperA="<%"]  模版分割代码段和html内容的前置分隔符，默认用"<%"
     * @apiParam    {String}     [seperB="%>"]  模版分割代码段和html内容的后置分隔符，默认用"%>"
     * @apiSuccess (return)   {String}  html   返回根据填充数据解析后的字符串内容
     * 
     * #####作者： sharkyang
     * #####version 0.0.1
     * @alias _tmp_fn
     * @apiVersion 2.1.0
     **/
    var _parseHtml = (function () {


        //缓存模板解析结果
        var _tmplfn_cache = {},
            _tmp_fn = function (id, dat, cached, seperA, seperB) {
                var strTmpl = "",
                    strTmplId = id, //缓存用的模板id
                    tmplSeperA = (seperA || (String.fromCharCode(60) + String.fromCharCode(37))),
                    tmplSeperB = (seperB || (String.fromCharCode(37) + String.fromCharCode(62))),
                    cachRslt = ((cached == void (0)) || !!cached),
                    nodeDel = [],
                    delFn = function () {
                        var th = null;
                        return function () {
                            if (th) {
                                clearTimeout(th);
                                th = 0;
                            }
                            th = setTimeout(function () {

                            }, 500);
                        }
                    },
                    fn = null;

                //console.log('##', "|" + tmplSeperA + "|");

                if (id.indexOf(tmplSeperA) != -1) {
                    //直接解析模板
                    strTmpl = id;
                } else if (!cachRslt || !(fn = _tmplfn_cache[id])) {
                    //无需缓存结果或未创建模板
                    var o = document.getElementById(id);
                    if (o) {
                        try {
                            strTmpl = o.innerHTML;
                            nodeDel.push(o);
                            //p && p.removeChild(o);
                            //console.log('nodep',p);
                            o = null;
                        } catch (e) {
                            console.error(e.stack || e);
                        }
                    } else if (!cachRslt) {
                        //尝试新模版未果，则再尝试从缓存读取。
                        fn = _tmplfn_cache[id];
                    }
                }

                if (!strTmpl && !fn) {
                    return "";
                }

                if (!fn) {
                    seperAR = tmplSeperA.replace(/([\\\{\}\[\]])/g, '\\$1');
                    seperBR = tmplSeperB.replace(/([\\\{\}\[\]])/g, '\\$1');
                    var rg = new RegExp(seperAR + "(.+?)" + seperBR, 'gm');
                    var TERM_VAR = '_T_'; //模版中输出变量名称

                    //临时存储模板中的js逻辑代码块
                    var scptBlks = [],
                        str;

                    // strTmpl = strTmpl.replace(/[\r\n]/, '').replace(//gi);
                    //保留模板中js逻辑部分的内容不被修改
                    strTmpl = strTmpl.replace(/[\r\n]/g, '').replace(rg, function (a, b, c, d) {
                        //return a;
                        //console.log('###', a, b, c, d, '####');
                        var idx = scptBlks.push(b);
                        return "${$" + (idx - 1) + "$}$";
                    });
                    //替换空白字符及模办中的引号
                    strTmpl = strTmpl.replace(/[\t\n\r]/g, "");
                    strTmpl = strTmpl.replace(/([\\'"])/g, '\\$1');
                    //清理多余的空格和注释
                    strTmpl = strTmpl.replace(/<!\-\-.*?\-\->/g, '')
                        .replace(/>(\s+?)/g, '>')
                        .replace(/(\s+?)</g, '<');


                    //还原模板中js逻辑代码
                    strTmpl = strTmpl.replace(/\$\{\$(\d+)\$\}\$/g, function (a, b) {
                        str = scptBlks[b];
                        str = str.replace(/(^\s+)|(\s+$)/gi, '');
                        if (str) {
                            //空内容直接略过;
                            if (str.charAt(0) == '=') {
                                return '";' + TERM_VAR + '+=' + str.substr(1) + ';' + TERM_VAR + '+="';
                            } else if (str.charAt(0) == '#') {
                                //<%#xxx%>的内容进行htmlSafe转换
                                return '";' + TERM_VAR + '+=_$.safe(' + str.substr(1) + ');' + TERM_VAR + '+="';
                            } else if (str.charAt(str.length - 1) == '{') {
                                return '";' + str + '' + TERM_VAR + '+="';
                            } else {
                                return '";' + str + ';' + TERM_VAR + '+="';
                            }
                        }
                    });
                    strTmpl = strTmpl.replace(/(;+)/, ';');
                    scptBlks = null;
                    strTmpl = 'var ' + TERM_VAR + '="' + strTmpl + '";function $Echo(s){' + TERM_VAR + '+=String(s);return ' + TERM_VAR + ';}';

                    var strFn = "$DATA=$DATA||{};with($DATA){try{" + strTmpl + "}catch(e){$errFn(e);}return " + TERM_VAR + ";}",
                        fn = null;
                    try {
                        fn = new Function('$DATA', '$Tmpl', '$errFn', '$G', '_$', strFn);
                    } catch (e) {
                        console.error("Function error in template:%s\n====TempleContent:", strTmpl, strFn);
                        console.error('ErroInfo:', e.stack || e);
                        //输出错误后模版就不处理了，所以用空函数防止继续报错。
                        fn = function () { };
                    }

                    //缓存模板函数
                    if (strTmplId && cachRslt) {
                        _tmplfn_cache[strTmplId] = fn;
                    }
                }

                //模板id调用应防止递归调用产生死循环，所以需要再包一层判断兹子模板是否递归。
                return fn(dat || {}, strTmplId ? function (tid, dt, ca, sa, sb) {
                    if (tid == strTmplId) { console.error('模板{#%s}内存在调用死循环!', strTmplId); return ''; }
                    return _tmp_fn(tid, dt, ca, sa, sb);
                } : _tmp_fn, function (e) {
                    console.error('###Error in template[' + strTmplId + ']', e.stack || e, 'Temp:\n', fn);
                }, _tmpFns, _prvt_fns);
            }
        _tmp_fn.__cache = _tmplfn_cache;
        return _tmp_fn;
    })();

    GY.extend(namespace, {
        getHTML: _parseHtml,
        parse: _parseHtml,

        
        $G: _tmpFns,

        
        _ver: VER
    });

})("tpl", window);


;(function (namespace) {

    var Util = require("Util");

    /**
     * @apiExample  使用示例
     * window.location.href="http://ssl.gongyi.qq.com/m/weixin/thanks.html?et=bk&transcode=1321652601201709192700007835&check=0&dbg=1";
     * 
     * GY.Util.uri.getUriPar('et')'   //"bk"
     * @apiExample  功能
     * 获取 url 中 ? 后面的参数，结果为对象格式或者字符串
     * @apiName getUriPar
     * @apiGroup GY.Util.uri
     * @api {~} GY.Util.uri.getUriPar getUriPar取参数值
     * 
     * @apiParam {string} [name] 如果指定 name 参数，则返回参数中键为 name 的值，如果值不存在则为 undefined；
     *                      没有指定 name 参数，则返回解析参数后的对象
     * @apiSuccess (return) {object}   object  返回值类型可能是object | string | undefined
     * @apiVersion 2.1.0
     */
    function _getUriPar(name) {
        var s = location.search.substr(1);
        var c = Util.string.toObj(s);
        var z = name ? c[name] : c;
        if (typeof z === 'string')
            return Util.string.toSafe(decodeURIComponent(z));
        return "";
    }

    /**
     * @apiExample  使用示例
     * http://ssl.gongyi.qq.com/m/weixin/thanks.html?et=bk&transcode=1321652601201709192700007835&check=0&dbg=1#ad=1;
     * 
     * GY.Util.uri.getHashPar('ad');  //"1"
     * 
     * GY.Util.uri.getHashPar();      //{ad: "1"}
     * @apiExample  功能：
     * 获取 url 中 # 后面的参数，结果为对象格式或者字符串
     * @apiName getHashPar
     * @apiGroup GY.Util.uri
     * @api {~} GY.Util.uri.getHashPar getHashPar取参数值
     * @apiParam {string} name 如果指定 name 参数，则返回参数中键为 name 的值，如果值不存在则为 undefined；
     *                      没有指定 name 参数，则返回解析参数后的对象
     * @apiSuccess (return) {object}   object  返回值类型可能是object | string | undefined
     * @apiVersion 2.1.0
     */
    function _getHashPar(name) {
        var s = location.hash.substr(1);
        var c = Util.string.toObj(decodeURIComponent(s));
        var z = name ? c[name] : c;
        if (typeof z === 'string')
            return Util.string.toSafe(z);
        return z;
    }

    /**
     * @apiExample  使用示例
     * GY.Util.uri.getUri();
     * @apiExample  功能：
     * 返回当前页面地址
     * @apiGroup GY.Util.uri
     * @apiName getUri
     * @api {~} GY.Util.uri.getUri  getUri取url
     * @apiSuccess (return) {string}   url  返回当前页面地址
     * @apiVersion 2.1.0
     */
    function _getUri() {
        return location.href;
    }

    /**
     * @apiExample  使用示例
     * GY.Util.uri.getHost();
     * @apiExample  功能：
     * 返回域名
     * @apiGroup GY.Util.uri
     * @apiName getHost
     * @api {~} GY.Util.uri.getHost  getHost取域名 
     * @apiSuccess (return) {string}   host  返回域名
     * @apiVersion 2.1.0
     */
    function _getHost() {
        return location.host;
    }

    /**
     * @apiExample  使用示例
     * GY.Util.uri.getPath();
     * @apiExample  功能：
     * 获取路径，包括协议段
     * @apiName getPath
     * @apiGroup GY.Util.uri
     * @api {~} GY.Util.uri.getPath getPath取路径
     * @apiSuccess (return) {string}   path  返回路径，包括协议段
     * @apiVersion 2.1.0
     */
    function _getPath() {
        // 低版本的 safari 中 location.origin 可能是 undefined 的
        return location.origin ? location.origin + location.pathname : (function () {
            var a = location.href;
            var b = a.lastIndexOf('#');
            b > 0 && (a = a.substring(0, b));
            b = a.lastIndexOf('?');
            b > 0 && (a = a.substring(0, b));
            return a;
        })();
    }

    /**
     * @apiExample  使用示例
     * GY.Util.uri.getOriginHref();
     * @apiExample  功能：
     * 在分享的时候常常需要去掉search中的code和stat字段
     * @apiGroup GY.Util.uri
     * @apiName getOriginHref
     * @api {~} GY.Util.uri.getOriginHref getOriginHref取url
     * @apiSuccess (return) {string}   url  返回源链接，常常需要去掉search中的code和stat字段
     * @apiVersion 2.1.0
     */
    function _getOriginHref() {
        var searchUrl = location.search;
        var code = _getUriPar('code');
        if (searchUrl.indexOf('?code=') > -1) {
            searchUrl = searchUrl.replace('code=' + code, '');
        } else {
            searchUrl = searchUrl.replace('&code=' + code, '');
        }
        var state = _getUriPar('state');
        if (searchUrl.indexOf('?state') > -1) {
            searchUrl = searchUrl.replace('state=' + state, '');
        } else {
            searchUrl = searchUrl.replace('&state=' + state, '');
        }
        //return searchUrl;
        return _getPath() + (searchUrl == '?'?"":searchUrl) + location.hash;
    }

    GY.extend(namespace, {
        getUriPar: _getUriPar,
        getHashPar: _getHashPar,
        getUri: _getUri,
        getHost: _getHost,
        getPath: _getPath,
        getOriginHref: _getOriginHref
    });
})("Util.uri");


; (function (namespace) {
    
    /****
     * @apiExample  使用示例 
     * GY.Util.img.lazyImages({"maxItemLoaders":6});
     * @apiExample 功能
     * 1.处理带lazyProperty属性的DOM元素，如果元素位置在屏幕offset范围内，就满足条件的DOM元素归为一类，未满足条件的DOM元素归为另一类。
     * 
     * 2.满足条件的DOM元素按top位移排序，先处理距离可视窗口近的。
     * 
     * 3.同时最大加载图片maxItemLoaders个。
     * 
     * @apiName lazyImages
     * @apiGroup GY.Util.img
     * @api {get} GY.Util.img.lazyImages  懒加载图片
     * @apiParam {json} obj  json对象，参数如下：
     * @apiParam {string} [obj.load_ele_type]  1:使用src方式加载图片   2:使用background-image方式加载图片
     * @apiParam {string} [obj.lazyProperty]           lazy获取真实图片url的dom属性名称
     * @apiParam { object} [obj.transIn]    图片加载完成后是否渐入,指定渐入动画的秒数或设置boolean开关  类型： boolean, Number
     * @apiParam {string} [obj.rollBackImg]            加载失败后默认使用的图片
     * @apiParam {int}    [obj.maxItemLoaders]         同时最大加载的图片数
     * @apiParam {float} [obj.opacity]     透明度
     * @apiParam {int} [obj.offset]   预加载屏幕外允许的范围
     * @apiVersion 2.1.0
     * 
     **/
    var _lazy_img = (function () {
        var _imgs = [], //已经可以加载的图片
            _q_imgs = [], //还未满足加载条件的图片列表 --检查的对象
            _prop_name = "data-lazy",
            _tmp_prop_name = "_c_lazy_itm_",
            _tmp_p1 = '_use_tran',
            _load_locked = 0,
            _cache_pos = true,
            _offset = 30,        //预加载屏幕外允许的范围
            _use_trans=true,    //是否使用渐入
            _rollback_img = "", //加载失败后的默认图
            _trans_delay = 0.2,  //渐变进入的动画时间(秒)
            _max_items_per_load=6, //每次可同时加载的最大图片数
            _cur_top = 0,//(window.scrollY || document.body.scrollTop),
            _cur_bottom = 0,//(window.scrollY || document.body.scrollTop) + screen.availHeight,
            _max_loader_per = 5; //每批最多处理的加载图片数量--超过，放入下一个周期处理防止高频阻塞--暂无效
        var load_ele_type="1";
        var _opacity = 0;//透明度


        var updatePos = function updatePos() {
            _cur_top = (window.scrollY || document.body.scrollTop);
            _cur_bottom = (window.scrollY || document.body.scrollTop) + screen.availHeight;
        };
        
        var fn_init = function (obj) {
            updatePos();
            if (fn_init.has_init) {
                return;
            }
            fn_init.has_init = true;
            $(document).on('scroll', _get_lazy_item)
                // .on('touchstart',_get_lazy_item)
                .on('touchmove', _get_lazy_item)
                .on('touchend', _get_lazy_item);
            fn_int=function(){}
        }

        var loadNext = function () {
                //解除锁定
                _load_locked--;
                //console.log('[lazy_load]', _load_locked);
                _imgs.length && setTimeout(_load_img); //稍延迟让处理下其它事情，避免高频操作
            },
            onLoad = function (e) {
                if(load_ele_type == "2"){
                    $(e.target).parent().css('background-image',' url('+ $(e.target).attr("src")+')');
                    $(e.target).hide();
                }
                var targ = $(e.target),
                    ustran = (targ.attr(_tmp_p1) == '1');
            
                clearItm(e.target, ustran);
                loadNext();
            },
            onError = function (e) {
                clearItm(e.target, $(e.target).attr(_tmp_p1) == '1');
                //使用回退默认图
                load_ele_type == "2"? $(e.target).css('background-image','url('+ _rollback_img+')') : $(e.target).attr('src', _rollback_img) ;
                loadNext();
            },
            clearItm = function (i, usetr) {
                var targ = $(i);
                targ.off('load').off('error').off('abort');
                if (!usetr) {
                    targ.css('visibility', 'visible');
                } else {
                    targ.css({ opacity: 1 });
                    setTimeout(function () { targ.css({ 'transition': '', 'opacity': '' }); i.removeAttribute(_tmp_p1); }, _trans_delay * 1000);
                }
            }

        //加载图片
        _load_img = function() {
            if (!_imgs.length || _load_locked>=_max_items_per_load) {
                console.log('[lazy_load]>>____no Imgs', _imgs.length, _load_locked);
                return;
            }
            //锁定加载
            _load_locked++;

            var it = _imgs.pop();
            if (_rollback_img) {
                it.itm.on('load', onLoad);
                it.itm.on('error', onError).on('abort', onError);
            } else {
                // it.itm.on('load', onLoad).on('error', onLoad).on('abort', onLoad);    
                it.itm.on('load', onLoad).on('error', onError).on('abort', onLoad);    
            }
            // it.itm.attr('src', it.src).attr(_tmp_prop_name, null).css('visibility', 'visible');
            if(load_ele_type == "2"){//取消img的占位
                it.itm.hide();
            }else{
                it.itm.css('visibility', 'visible');
            }
            it.itm.attr('src', it.src).attr(_tmp_prop_name, null);



            if(it.itm.parent().hasClass('background-lazy')){
                it.itm.parent().removeClass('background-lazy');
            }
            
        };

        //检查图片位置
        var _chk_pos = GY.rateControll(function() {
            updatePos();
            if (!_q_imgs.length) {
                return;
            }
            //console.log('----');
            var it, il = _q_imgs.length,_new_arr=[];
            while (il-- > 0) {
                //it = _q_imgs.pop();
                it = _q_imgs[il];
                if (!it.itm || !it.itm.length || !it.itm.get(0).parentNode) {
                    //已不存在了
                    //_q_imgs.splice(il, 1);
                    continue;
                }
                if ((_cache_pos && ('pos' in it) && (it.pos.top <= _cur_bottom) && (it.pos.bottom >= _cur_top))
                    || ((it.pos = {}) && (it.pos.top = it.itm.offset().top- _offset) <= _cur_bottom && (it.pos.bottom = it.itm.height()+it.pos.top + _offset) >= _cur_top)) {
                //if ((_cache_pos && ('pos' in it) && (it.pos-4) <=_cur_bottom) || ((it.pos=it.itm.offset().top) - 4) <= _cur_bottom) {
                    //it = _q_imgs.splice(il, 1)[0];
                    _imgs.push(it);
                } else {
                    _new_arr.push(it);
                }
            }
            _imgs.sort(function (x,y){ if (x.pos.top < y.pos.top) {
                return 1;
            } else if (x.pos.top == y.pos.top) {
                return 0;
            } else {
                return -1;
            }})

            _q_imgs.length = 0;
             //对于未符合条件的图片，再次合并回原数组  
            if (_new_arr.length) {
                _new_arr.unshift(0, 0);
                _q_imgs.splice.apply(_q_imgs, _new_arr);
            }

            if (_imgs.length) {
                //因为是延时处理，所以在这里需要加上处理
                _load_img();
            }
        }, .2);

        var _get_lazy_item = GY.rateControll(function() {
            // var $obj = load_ele_type=="2"?$('div[' + _prop_name + ']') : $('img[' + _prop_name + ']');
            var $obj = $('img[' + _prop_name + ']');
            $obj.each(function (idx, itm) {
                itm = $(itm);
                if (itm.attr(_prop_name)) {
                    itm.attr(_tmp_prop_name);
                    if (_use_trans) {
                        itm.attr(_tmp_p1, 1);
                        itm.css('opacity', _opacity);
                        // if(load_ele_type =="1"){
                           /* if(!itm.attr("src")){
                                itm.css('opacity', 0);
                            }else{
                                itm.css('opacity', 0.6);
                            }*/
                       /* }else{
                            itm.css('opacity', 0.6);
                        }*/

                        itm.css('transition', 'opacity ' + _trans_delay + 's');
                    } else {
                        itm.css('visibility', 'hidden');
                    }
                    
                    _q_imgs.push({ 'itm': itm, 'src': itm.attr(_prop_name) });
                }
                itm.attr(_prop_name, null);
            });

            //检查已筛选的图片，符合条件的放入加载列表
            if (_q_imgs.length) {
                _chk_pos();
            }

            //处理待加载
            if (_imgs.length) {
                //调用一次加载
                _load_img();
            }
        }, .1);

        //只负责去检索还未加载的lazy图片并检查
        return function (obj) {
            if(!!obj && !!obj.load_ele_type){
                load_ele_type =  obj.load_ele_type;
            }else{
                load_ele_type = "1";
            }

            if(!!obj && !!obj.opacity){
                _opacity = obj.opacity;
            }
            if(!!obj && !!obj.offset){
                _offset = obj.offset;
            }

            //console.log('xxxOJB', obj);
            fn_init(obj);
            //指定lazy保存图片地址的dom属性名称--默认data-lazy
            if (obj && obj.lazyProperty) {
                _prop_name = obj.lazyProperty;
            }

            if (obj && !isNaN(obj.maxItemLoaders) && obj.maxItemLoaders-0==obj.maxItemLoaders) {
                _max_items_per_load = Math.max(obj.maxItemLoaders-0,1);
            }

            if (obj && obj.rollBackImg) {
                _rollback_img = obj.rollBackImg;
            }
            
            //是否启用渐入
            if (obj && obj.transIn) {
                if (isNaN(obj.transIn) && (obj.transIn-0)==obj.transIn) {
                    _trans_delay = obj.transIn / 1000;
                    _trans_delay < 0 && (_trans_delay = 0);
                } else {
                    _trans_delay = 0.3;
                }
                _use_trans = true;
            } else if (obj && ('transIn' in obj)) {
                _use_trans = false;
            }

            //console.log('Transition:', _use_trans,obj);

            //_cur_bottom = (window.scrollY || document.body.scrollTop) + screen.availHeight;
            updatePos();
            _get_lazy_item();
        }
    })();

    GY.extend(namespace, {
        lazyImages: _lazy_img
    });
})("Util.img");


; (function (nameSpace) {
    /**
     * @apiExample 使用示例
     * GY.Util.window.getScrollTop() ;
     * @apiExample 功能
     * 获取滚动条滚动的高度
     * @apiName getScrollTop
     * @apiGroup GY.Util.window
     * @api {~} GY.Util.window.getScrollTop getScrollTop取窗口高度
     * 
     * @apiSuccess (return) {number} scrollPos 滚动条滚动的高度
     * @apiVersion 2.1.0
     */
    function _getScrollTop() {
        var scrollPos;
        if (window.pageYOffset) {
            scrollPos = window.pageYOffset;
        }
        else if (document.compatMode && document.compatMode != 'BackCompat')
        { scrollPos = document.documentElement.scrollTop; }
        else if (document.body) { scrollPos = document.body.scrollTop; }
        return scrollPos;
    }

    /**
     * @apiExample 使用示例
     * GY.Util.window.textareaAdapt() ;
     * @apiExample 功能
     * textarea文本高度自适应
     * @apiName textareaAdapt
     * @apiGroup GY.Util.window
     * @api {~} GY.Util.window.textareaAdapt textarea文本高度自适应
     * 
     * @apiVersion 2.1.0
     */

    function _textareaAdapt() {
        $(function () {
            //textarea高度自适应
            function textareaAdapt(event) {
                $(this).height(this.scrollHeight);
            }
            $('textarea').on('input', textareaAdapt);
        })
    }
    /**
     * @apiExample 使用示例
     * GY.Util.window.pageShow() ;
     * @apiExample 功能
     * 微信h5返回上一页之后刷新页面
     * @apiName pageShow
     * @apiGroup GY.Util.window
     * @api {~} GY.Util.window.pageShow h5返回刷新
     * 
     * @apiVersion 2.1.0
     */
    function _pageShow() {
        window.addEventListener('pageshow', function (event) {
            if (event.persisted) {
                window.location.reload();
            }
        })
    }

    GY.extend(nameSpace, {
        getScrollTop: _getScrollTop,
        textareaAdapt: _textareaAdapt,
        pageShow: _pageShow
    });
})("Util.window");


;(function(nameSpace, global){
    var Util = require("Util");
    if(!global.GY) {
        return;
    }
    //默认业务逻辑名
    var _actionName = "action_index";

    /**
     */
    function _getAction(par){

        var _par = {

        }
        !!par && $.extend(_par, par);
        if(!_par["ctr"]){
            console.error('run({"ctr":""})', "尴尬，控制器名称不见了！");
            return;
        }
        // 对象存在则绑定方法到Busi对象上
        if (window[_par['ctr']]) {
            GY.extend("Busi._", window[_par['ctr']]);
            // console.log('EEEDEFINE', GY.Busi,window[_par['ctr']]);
        } else {
            console.error('run({"ctr":""})', "尴尬，控制器名称不见了！");
        }
        if(!!_par["act"]){
            _actionName = "action_"+_par["act"];
        }else{
            _actionName = "action_index";
        }
    }

    /**
     * @apiExample  使用示例
     * GY.Sys.run({"hash":1, "rulePar":"index"});
     *@apiExample  功能 
     * 业务逻辑统一入口
     * 
     * 1.计算出业务入口函数名称，"action_"+par.rulePar  默认是action_index
     * 
     * 2.先执行GY.Busi.pageInit()
     * 
     * 3.再执行`GY.Busi[actionName]()`, actionName是在  `GY.Sys.run`中设置的par.rulePar,默认是 action_index方法
     * @apiGroup GY.Sys
     * @apiName run
     * @api {~} GY.Sys.run  业务逻辑统一入口
     * @author hunterguo
     * @apiParam {json} par   json对象
     * @apiParam {string}    par.ctr    控制器名称
     * @apiParam {string}  par.act    控制器里action
     * @apiVersion PC 1.0.0
     * 
     * */
    var _run = function(par){
        _getAction(par);
        _runAction();
        return;
    }

    /**
     * @apiExample  功能
     * 执行业务逻辑
     * 1.先执行GY.Busi.pageInit()
     * 
     * 2.再执行GY.Busi.run中设置的par.rulePar,默认是执行 action_index
     * @apiVersion 2.1.0
     * @protected
     * */
    function _runAction(){
        //这里引入外链js
        if (!GY.Busi._) {
            console.error("没有找到页面定义，怎么能执行？");
            return;
        }
        if(typeof(GY.Busi['_']['pageInit']) == 'function'){GY.Busi._.pageInit();}
        if(typeof(GY.Busi['_'][_actionName]) == 'function') GY.Busi._[_actionName]();
    }

    /**
     * @apiExample apiExample
     * Ajax统一异步接口调用
     * 1.type 默认是 get
     * 
     * 2.dataType 默认是 jsonp
     * 
     * 3.timeout 默认是8000毫秒
     * 
     * 4.请求失败时，会调用GY.Sys.rpt.info()上报错误到badjs系统、调用GY.Sys.rpt.gyErr()上报公益监控系统。
     * @apiGroup GY.Sys
     * @apiName ajax
     * @api {get/post} GY.Sys.ajax  Ajax统一异步接口调用
     * @apiParam {json} par   json对象
     * @apiParam {string="GET","POST"} [par.type="GET"]   请求方式
     * @apiParam {string} [par.dataType="jsonp"]   请求返回的数据格式
     * @apiParam {Number} [par.timeout=8000]   超时时间
     * @apiParam {json} [par.data]   请求数据，json对象
     * @apiParam {function} [par.error]   请求失败处理函数
     * @apiParam {function} [par.sucess]   请求成功处理函数
     * @apiVersion 2.1.0
     * @author hunterguo
     * */
    var _ajax = function(par){
        var _par = {
            type:"GET"
            ,dataType:"jsonp"
            ,timeout:8000
            /*,error:function(err){
                try{
                    GY.Sys.rpt.info(Util.object.toString("url:" + this.url + ";" + err));
                }catch (e){}
                if(!!par && GY.is_fun(par.error)){
                    par.error();
                    par.error = null;
                }
            },success:function(rData){
                if(110021 <= rData.code && 110027 <= rData.code){
                    //alert(rData.msg);

                    Busi.authorize.getCode({snsapi:"snsapi_userinfo"});
                    return;
                    //跳转授权
                }
                if(!!par && GY.is_fun(par.success)){
                    par.success();
                    par.success = null;
                }
            }*/
        };
        if(!!par && GY.is_obj(par)){
            $.extend(_par, par);
        }
        //错误日志上报
        _par.error = function (xhr,errmsg) {
            try{
                var _errExt = {msg:errmsg||""};
                var _errLevel = 0;
                if("timeout"==errmsg) _errLevel = 1;
                var _t = "接口错误";
                var _retData = "";
                if(_par.dataType == "json"){
                    (!!xhr.readyState) && (_errExt["res"] = xhr.responseText);
                }
                if(_errLevel == 1){
                    _errExt["timeout"] = _par["timeout"]||0;
                    _t = "接口超时";
                }
                //上报badjs
                GY.Sys.rpt.info("open url:" + _par.url + "; par:" + Util.object.toStr(_par.data) + ";ext:"+Util.object.toStr(_errExt), true);
                //上报公益监控系统
                GY.Sys.rpt.gyErr({"t":_t, "par":{"url":_par.url,"reqData":_par.data,"ext":_errExt||""}});
            }catch (e){}
            if(!!par && GY.is_fun(par.error)) par.error(xhr, errmsg);
        };

        if(_par.type == "GET" && _par.dataType != "json"){
            _par.jsonp = "jsoncallback";
            _par.jsoncallback = "?";
        }
        $.ajax(_par);
    };

    GY.extend(nameSpace,
        {
            run:_run
            , ajax: _ajax
        });
})("Sys", window);
;(function(nameSpace){
    //业务平台
    var _config = {
        "mtaPar":{
            "sid":500113607
            ,"cid":500117735
        }
    }
    /**
     * 设置微信业务配置
     * @apiName set
     * @apiGroup GY.Busi.config
     * @api {~} GY.Busi.config.set  config-set设置
     * @apiVersion 2.1.0
     * @author hunterguo
     * */
    function _set(key, strVal){
        if(!strVal && GY.is_obj(key)){
                !!key && $.extend(_config, key);
        }else if(!!key && !!strVal){
                _config[key] = strVal;
        }
    }

    /**
     * @apiName get
     * @apiGroup GY.Busi.config
     * 获取微信业务配置
     * @api {~} GY.Busi.config.get  config-get读取
     * @apiVersion 2.1.0
     * @author hunterguo
     * */
    function _get(key){
        if(!key || !_config[key]){
                return _config;
        }else{
                return _config[key];
        }
    }


    GY.extend(nameSpace, {
        "get":_get
        ,"set":_set
    });
})("Busi.config");
;(function(global){
    var _isWhiteUser = false;
    var _error = [];
    var _gyerror = [];
    var _error_map = {};
    var _gyerror_map = {};
    var id = 1188;
    var _config = {
        id: id||0, // 上报 id
        uin: 0, // user id
        url: "", // 上报 接口
        combo: 1, // 是否合并 !0-合并 0-不合并
        ext: null, // 扩展参数 用于自定义上报
        level: 4, // 错误级别 1-debug 2-info 4-error
        ignore: [], // 忽略某个错误, 支持 Regexp 和 Function
        random: 1, // 抽样 (0-1] 1-全量
        delay: 1000, // 延迟上报 combo 为 true 时有效
        submit: null, // 自定义上报方式
        repeat: 5 // 重复上报次数(对于同一个错误超过多少次不上报)
        ,bjRptUrl:""    //badjs上报的url
        ,gyRptUrl:"http://yundonate.gongyi.qq.com/cgi-bin/WhiteReportMsg.fcgi"
        ,isGyRpt:0
        ,gyRandom: 0, // 抽样 (0-1] 1-全量
    };


    var _isOBJByType = function(o, type) {
        return Object.prototype.toString.call(o) === "[object " + (type || "Object") + "]";
    };

    var _isOBJ = function(obj) {
        var type = typeof obj;
        return type === "object" && !!obj;
    };

    var _isEmpty = function(obj) {
        if (obj === null) return true;
        if (_isOBJByType(obj, "Number")) {
            return false;
        }
        return !obj;
    };

    /**
     * @apiExample  使用示例
     * GY.Sys.rpt.getConf();
     * @apiExample  功能
     * 获取上报的配置信息
     * @apiName getConf
     * @apiGroup GY.Sys.rpt
     * @api {~} GY.Sys.rpt.getConf  上报-读上报配置
     * @apiSuccess (sucess) {json} config  json对象
     * @apiVersion 2.1.0
     * 
     * */
    function _getConf(){
        return _config;
    }
    /**
     * @apiExample  使用示例
     * GY.Sys.rpt.setConf({"combo":0});
     * @apiExample  功能
     * 设置配置信息
     * @apiName setConf
     * @apiGroup GY.Sys.rpt
     * @api {~} GY.Sys.rpt.setConf  上报-写上报配置
     * @apiParam {json} par json对象
     * @apiParam {int} [par.id]  上报 id
     * @apiParam {string} [par.uin]  user id
     * @apiParam {string} [par.url]  上报 接口
     * @apiParam {int} [par.combo=1]  是否合并 !0-合并 0-不合并
     * @apiParam {object} [par.ext=null]   扩展参数 用于自定义上报
     * @apiParam {int} [par.level=4]  错误级别 1-debug 2-info 4-error
     * @apiParam {array} [par.ignore]  数组 忽略某个错误, 支持 Regexp 和 Function
     * @apiParam {int} [par.random=1]  抽样 (0-1] 1-全量
     * @apiParam {int} [par.delay=1000]  延迟上报 combo 为 true 时有效
     * @apiParam {object} [par.submit=null]  自定义上报方式
     * @apiParam {int} [par.repeat=5]  重复上报次数(对于同一个错误超过多少次不上报)
     * @apiParam {string} [par.bjRptUrl] badjs上报的url
     * @apiParam {string}[par.gyRptUrl="http://yundonate.gongyi.qq.com/cgi-bin/WhiteReportMsg.fcgi"] 
     * @apiParam {int}[par.isGyRpt =0]
     * @apiParam {number}[par.gyRandom=0] 抽样 (0-1] 1-全量
     * @apiVersion 2.1.0
     * 
     * */
    function _setConf(par){
        if(!par || !_isOBJ(_isOBJ)) return;
        for (var key in par) {
            _config[key] = par[key];
        }
    }

    var orgError = global.onerror;

    global.onerror = function(msg, url, line, col, error) {
        var newMsg = msg;

        if (error && error.stack) {
            newMsg = _processStackMsg(error);
        }

        if (_isOBJByType(newMsg, "Event")) {
            newMsg += newMsg.type ?
                ("--" + newMsg.type + "--" + (newMsg.target ?
                    (newMsg.target.tagName + "::" + newMsg.target.src) : "")) : "";
        }

        report.push({
            msg: newMsg,
            target: url,
            rowNum: line,
            colNum: col
        });

        _send();
        orgError && orgError.apply(global, arguments);
    };

    var _processError = function(errObj) {
        try {
            if (errObj.stack) {
                var url = errObj.stack.match("https?://[^\n]+");
                url = url ? url[0] : "";
                var rowCols = url.match(":(\\d+):(\\d+)");
                if (!rowCols) {
                    rowCols = [0, 0, 0];
                }

                var stack = _processStackMsg(errObj);
                return {
                    msg: stack,
                    rowNum: rowCols[1],
                    colNum: rowCols[2],
                    target: url.replace(rowCols[0], "")
                };
            } else {
                //ie 独有 error 对象信息，try-catch 捕获到错误信息传过来，造成没有msg
                if (errObj.name && errObj.message && errObj.description) {
                    return {
                        msg: JSON.stringify(errObj)
                    };
                }
                return errObj;
            }
        } catch (err) {
            return errObj;
        }
    };

    /**
     * 处理错误日志堆
     * @private
     * */
    var _processStackMsg = function(error) {
        var stack = error.stack
            .replace(/\n/gi, "")
            .split(/\bat\b/)
            .slice(0, 9)
            .join("@")
            .replace(/\?[^:]+/gi, "");
        var msg = error.toString();
        //多个错误用@连接
        if (stack.indexOf(msg) < 0) {
            stack = msg + "@" + stack;
        }
        return stack;
    };

    /**
     * 错误信息字符串格式化
     * @private
     * */
    var _error_tostring = function(error, index) {
        var param = [];
        var params = [];
        var stringify = [];
        if (_isOBJ(error)) {
            error.level = error.level || _config.level;
            for (var key in error) {
                var value = error[key];
                if (!_isEmpty(value)) {
                    if (_isOBJ(value)) {
                        try {
                            value = JSON.stringify(value);
                        } catch (err) {
                            value = "[BJ_REPORT detect value stringify error] " + err.toString();
                        }
                    }
                    stringify.push(key + ":" + value);
                    param.push(key + "=" + encodeURIComponent(value));
                    params.push(key + "[" + index + "]=" + encodeURIComponent(value));
                }
            }
        }

        // msg[0]=msg&target[0]=target -- combo report
        // msg:msg,target:target -- ignore
        // msg=msg&target=target -- report with out combo
        return [params.join("&"), stringify.join(","), param.join("&")];
    };

    /**
     * 通过图片方式上报接口
     * @private
     * */
    var _imgs = [];
    /**
     * 触发上报提交
     * @private
     * */
    var _submit = function(url) {
        if (_config.submit) {
            _config.submit(url);
        } else {
            var _img = new Image();
            _imgs.push(_img);
            _img.src = url;
        }
        //如果上报的是公益的url
        /*if(!!_config.isGyRpt){
            _config.report = _config.bjRptUrl;
        }*/
    };

    /**
     * 相同错误的重复率
     * @private
     * */
    var _is_repert = function(error, pf) {
        if (!_isOBJ(error)) return true;
        var msg = error.msg;
        var times;
        if("gy" == pf)
            times = _gyerror_map[msg] = (parseInt(_gyerror_map[msg], 10) || 0) + 1;
        else
            times = _error_map[msg] = (parseInt(_error_map[msg], 10) || 0) + 1;
        return times > _config.repeat;
    };

    var bj_error_list = [];
    var gy_error_list = [];
    var comboTimeout = 0;
    var gyComboTimeout = 0;
    /**
     * 上报错误
     * @private
     * */
    var _send = function(isReoprtNow){
        _sendTask("gy", isReoprtNow); //上报公益接口
        _sendTask("badjs", isReoprtNow);     //上报badjs接口
    }
    var _sendTask = function(platform, isReoprtNow) {

        var _isGy = ("gy"==platform)?true:false;

        var _rptUrl = _isGy?_config.gyRptUrl:_config.bjRptUrl;
        if (!_rptUrl) return;
        var _err = _isGy?_gyerror:_error;
        var error_list = _isGy?gy_error_list:bj_error_list;
        while (_err.length) {
            var isIgnore = false;
            var error = _err.shift();
            // 重复上报
            if (_is_repert(error, platform)) continue;
            var error_str = _error_tostring(error, error_list.length);
            if (_isOBJByType(_config.ignore, "Array")) {
                for (var i = 0, l = _config.ignore.length; i < l; i++) {
                    var rule = _config.ignore[i];
                    if ((_isOBJByType(rule, "RegExp") && rule.test(error_str[1])) ||
                        (_isOBJByType(rule, "Function") && rule(error, error_str[1]))) {
                        isIgnore = true;
                        break;
                    }
                }
            }
            if (!isIgnore) {
                if (_config.combo) {
                    error_list.push(error_str[0]);
                } else {
                    _submit(_rptUrl + error_str[2] + "&_t=" + (+new Date));
                }
                _config.onReport && (_config.onReport(_config.id, error));
            }
        }

        // 合并上报
        var count = error_list.length;
        if (count) {
            var comboReport = function() {
                if(!bj_error_list.length) return;
                clearTimeout(comboTimeout);
                _submit(_config.bjRptUrl + bj_error_list.join("&") + "&count=" + bj_error_list.length + "&_t=" + (+new Date));
                comboTimeout = 0;
                bj_error_list = [];
            };
            var gyComboReport = function() {
                if(!gy_error_list.length) return;
                clearTimeout(gyComboTimeout);
                _submit(_config.gyRptUrl + gy_error_list.join("&") + "&count=" + gy_error_list.length + "&_t=" + (+new Date));
                gyComboTimeout = 0;
                gy_error_list = [];
            };

            if (isReoprtNow) {
                _isGy?gyComboReport():comboReport(); // 立即上报
            }else if (_isGy && !gyComboTimeout){
                gyComboTimeout = setTimeout(gyComboReport, _config.delay); // 延迟上报
            }
            else if (!comboTimeout) {
                comboTimeout = setTimeout(comboReport, _config.delay); // 延迟上报
            }
        }
    };

    var report = global.BJ_REPORT = {
        push: function(msg, pf) { // 将错误推到缓存池
            // 抽样
            if (Math.random() >= _config.random) {
                return report;
            }
            var data = _isOBJ(msg) ? _processError(msg) : {
                msg: msg
            };

            // ext 有默认值, 且上报不包含 ext, 使用默认 ext
            if (_config.ext && !data.ext) {
                data.ext = _config.ext;
            }
            /*if(!!_gyExt && !!_config.isGyRpt){
                $.extend(data, _gyExt);
            }*/
            // 在错误发生时获取页面链接
            // https://github.com/BetterJS/badjs-report/issues/19
            if (!data.from) {
                data.from = encodeURIComponent(location.href);
            }
            if("gy" == pf){
                _gyerror.push(data);
            }else{
                _error.push(data);
            }
            _send();
            return report;
        },
        report: function(msg) { // error report
            msg && report.push(msg);
            _send(true);
            return report;
        },
        info: function(msg,isall,pf) { // info report
            if(!_isWhiteUser && !isall) return;
            if (!msg) {
                return report;
            }
            if (_isOBJ(msg)) {
                msg.level = 2;
            } else {
                msg = {
                    msg: msg,
                    level: 2
                };
            }

            if("gy" == pf){
                report.push(msg, "gy");
            }else{
                report.push(msg);
            }
            return report;
        },
        gyInfo: function(msg, ext, isall){
            if(!_isWhiteUser && Math.random() >= _config.gyRandom && !isall) {      //非白名单用户，按比例上报，如果是错误上报
                return report;
            }
            _config.report = _config.gyRptUrl;
            _config.isGyRpt = 1;
            var msgObj = {class:"performace",type:"page",i:location.pathname||"",m:GY.browser.client, "msg":msg};
            if(!!_isWhiteUser) msgObj["class"] = "white";
            if(!!ext) $.extend(msgObj, ext);
            return this.info(msgObj, true, "gy");
        },
        gyErr :function(msg, ext){
            if(!ext){
                ext = {};ext["class"] = "error";
            }
            return this.gyInfo(msg, ext, true);
        },
        gyWhite: function (msg, ext) {
            if(!_isWhiteUser) return;
            return this.gyInfo(msg, ext, true);
        },
        debug: function(msg, isall) { // debug report
            if(!_isWhiteUser && !isall) return;
            if (!msg) {
                return report;
            }
            if (_isOBJ(msg)) {
                msg.level = 1;
            } else {
                msg = {
                    msg: msg,
                    level: 1
                };
            }
            report.push(msg);
            return report;
        },
        init: function(config) { // 初始化
            if (_isOBJ(config)) {
                for (var key in config) {
                    _config[key] = config[key];
                }
            }
            // 没有设置id将不上报
            var id = parseInt(_config.id, 10);
            if (id) {
                // set default report url and uin
                console.log("localhost:"+ location.hostname);
                if (/qq\.com$/gi.test(location.hostname)) {
                    if (!_config.url) {
                        console.log("qq domain");
                        _config.url = "//badjs2.qq.com/badjs";
                    }
                    if (!_config.uin) {
                        _config.uin = GY.user.uid||0;          //微信和手Q都支持上报
                    }
                }

                var _lastStr = "?id=" + id +
                    "&uin=" + _config.uin +
                    // "&from=" + encodeURIComponent(location.href) +
                    "&"
                _config.report = (_config.url || "/badjs") + _lastStr;
                _config.bjRptUrl = _config.report;
                _config.gyRptUrl = _config.gyRptUrl + _lastStr;
            }

            // if had error in cache , report now
            if (_error.length || _gyerror.length) {
                _send();
            }
            //_gyWhiteRpt();//当前页面路径上报
            return report;
        },
        __onerror__: global.onerror
    };

    typeof console !== "undefined" && console.error && setTimeout(function() {
        var err = ((location.hash || "").match(/([#&])BJ_ERROR=([^&$]+)/) || [])[2];
        err && console.error("BJ_ERROR", decodeURIComponent(err).replace(/(:\d+:\d+)\s*/g, "$1\n"));
    }, 0);



    /**
     * @apiExample  使用示例
     * GY.Sys.rpt.__init();
     * @apiExample  功能
     * 初始化上报
     * @apiName __init
     * @apiGroup GY.Sys.rpt
     * 
     * @api {~} GY.Sys.rpt.__init  上报-初始化上报
     * @apiPrivate
     * @apiVersion 2.1.0
     * */
    function _init(){
        //初始化
        report.init(global.bjConf);
        //_initWhiteUser();
    }
    /**
     * @apiExample  使用示例
     * GY.Sys.rpt.chkWhite(); //true或false
     * @apiExample  功能
     * 检查是否为白名单用户
     * @apiName chkWhite
     * @apiGroup GY.Sys.rpt
     * @api {~} GY.Sys.rpt.chkWhite  上报-chkWhite
     * @apiSuccess (return) {boolean}  bool  true:白名单用户  false:非白名单用户  
     * @apiVersion 2.1.0
     */
    function _checkWhite(){
        if(!!_isWhiteUser){
            return true;
        }else{
            return false;
        }
    }

    GY.extend("Sys.rpt", $.extend({
        __init:_init
        ,getConf:_getConf
        ,setConf:_setConf
        //,initWhiteUser:_initWhiteUser
        ,chkWhite:_checkWhite
    }, report));

})(window);

; (function (ns, win) {
    

    /**
     * 自动上报attribute属性
     * mta自动上报属性名可通过全局变量定义
     * 或者可以通过调用Sys.mta.init(arg)，设置arg中mta_prop,mta_propVal来设置属性名
     * MTA_PROP_VAL_NM  ---mta上报时取上报值的dom属性
     * MTA_PROP_NM      ---mta上报时获取上报时间名的dom属性
     * MTA_NOT_AUTO     ---是否禁用自动点击上报设置为true则不会自动上报
     * @author sharkyang
     * @since 2017-08-01
     * @private
     **/
    var _param_args = {
        'mta_prop': 'data-mta',
        'mta_propVal':'data-mta-param'
    };

    /**
     * Mta 自动上报点击回调
     * @author sharkyang
     * @apiParam {any} e 
     * @private
     **/
    function _on_body_clk(evt) {
        console.log('body clik');
        //如果延迟设置关闭了自动上报也有效。
        if (window.MTA_NOT_AUTO || !window.MtaH5) {
            $(document.body).off('click', _on_body_clk);
            console.log('click removed!');
            return;
        }
        window.objMta = evt.target;
        var $this = $(evt.target),
            targmta = $this.closest('['+_param_args.mta_prop+']');
        
        var strMta = targmta.attr(_param_args.mta_prop),
            strAppend = targmta.attr(_param_args.mta_propVal);
        if (!strMta) {
            console.log('not mta..', strMta);
            return;
        }
        if (strAppend) {
            var s = strAppend,
                funs = [JSON.parse, eval];
            
            if (/\{.+\}/gi.test(s)) {
                for (var i = 0, il = funs; i < il; i++) {
                    try {
                        strAppend = funs[i](s) || null;
                        break;
                    } catch (e) { }
                }
            }

            (!strAppend || (typeof strAppend == 'string' || typeof strAppend == 'number')) && ((strAppend = {}), strAppend[s] = true);
        }

        try {
            if (strAppend) {
                MtaH5.clickStat(strMta, strAppend);
            } else {
                MtaH5.clickStat(strMta);
            }
        } catch (e) { }
    }

    /**
     * @apiExample  使用示例
     * GY.Sys.mta.init({"mta_prop":"data-mta", "mta_propVal":"data-mta-param"});
     * @apiExample 功能
     * 添加mta点击流自动上报
     * @apiName init
     * @apiGroup GY.Sys.mta
     * @api {~} GY.Sys.mta.init 添加mta点击流自动上报
     * @apiParam {object} obj
     * @apiParam {string} [obj.mta_prop="data-mta"]    存放上报事件的属性 
     * @apiParam {string} [obj.mta_propVal="data-mta-param"]  存放上报参数的属性
     * @apiVersion 2.1.0
     * @author sharkyang
     * @since  2017-08-01
     */
    function _init_auto(obj) {
        // if (!window.MtaH5) {
        //     console.error('>>>No MTA lib found!');
        //     return;
        // }

        obj = obj || {};
        //全局变量覆盖--优先使用obj属性名
        window.MTA_PROP_NM && !obj.mta_prop && (obj.mta_prop = MTA_PROP_NM);
        window.MTA_PROP_VAL_NM && !obj.mta_propVal && (obj.mta_propVal = MTA_PROP_VAL_NM);

        if (obj) {
            for (var k in obj) {
                _param_args[k] = obj[k];
            }
        }

        $(document.body)
            .off('click', _on_body_clk)
            .on('click', _on_body_clk);
    }

    win._mtac = {"performanceMonitor":1,"senseQuery":1};
    var _config = GY.Busi.config.get();    //配置信息
    /**
     * @apiExample  使用示例
     * GY.Sys.mta.__init({sid:"500124846",cid:"500124847"});
     * 
     * @apiExample 功能
     * 1.如果已经初始化过，并且sid和cid都没变化，就不再重新加载
     * 
     * 2.没有初始化过，就添加自动上报逻辑处理
     * 
     * @apiExample  说明（来自mta官网）：
     * 1、请将统计代码放置在所有引入js类库的最后一个，在</body>之前；
     * 
     * 2、如果H5应用使用Grunt、Gulp等构建工具进行构建，请注意sdk引入位置须在构建标签外；
     * 
     * 3、正确嵌入代码后，10分钟左右即可查看网站部分指标的实时数据，次日可以查看昨日的全部数据。
     * 
     * @apiName __init
     * @apiGroup GY.Sys.mta
     * @api {~} GY.Sys.mta.__init  初始化统计上报
     * @apiParam {json} obj json对象
     * @apiParam {string} obj.sid  是mta提供的，http://mta.qq.com应用管理模块可查看
     * @apiParam {string} obj.cid  是mta提供的，http://mta.qq.com应用管理模块可查看
     * @apiVersion 2.1.0
     * 
     * */
    function _init(par) {
        //如果已经初始化过，并且sid和cid都没变化，就不再重新加载。
        //if(!!win.MtaH5 )
        if(!!win.MtaH5 && !par){
            //win.MtaH5 = null;
            return;
        }
        var _par = _config["mtaPar"];/*{
         sid:500113607
         ,cid:500117735
         };*/
        !!par && $.extend(_par, par);

        (function() {

            window._mtac = {"performanceMonitor":1};
            var mta = document.createElement("script");
            mta.src = "//pingjs.qq.com/h5/stats.js?v2.0.4";
            mta.setAttribute("name", "MTAH5");
            mta.setAttribute("sid", _par.sid);
            mta.setAttribute("cid", _par.cid);
            var s = document.getElementsByTagName("script")[0];
            s.parentNode.insertBefore(mta, s);
            
             //添加自动上报逻辑处理
             
            if (!window.MTA_NOT_AUTO) {
                _init_auto();
            }

        })();
    }

    /**
     * @apiExample 使用示例
     * GY.Sys.mta.click({t:'wxdetai',p:{'choosemoney':'true'}});
     * 
     * @apiExample 功能
     * 点击事件统计
     * @apiName click
     * @apiGroup GY.Sys.mta
     * @api {~} GY.Sys.mta.click  点击事件统计
     * @apiParam {json} par json对象
     * @apiParam {string} [par.t="click"]  事件ID
     * @apiParam {json} [par.p = {"def":"true"}]  参数,"true"为新增参数的默认值
     * @apiVersion 2.1.0
     * */
    function _click(par){
        try{
            var _t = (!!par && !!par.t)?par.t:"click";
            var _p = (!!par && !!par.p)?par.p:{"def":'true'};
            !!MtaH5 && MtaH5.clickStat(_t, _p);
        }catch(e){}
    }

    GY.extend(ns, {
        __init:_init
        , click: _click
        //自动点击上报
        , init:_init_auto 
    });
})("Sys.mta", window);